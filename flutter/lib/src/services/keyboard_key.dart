import 'package:flutter_web/foundation.dart';

class LogicalKeyboardKey extends Diagnosticable {
  const LogicalKeyboardKey(this.keyId, {this.debugName, this.keyLabel})
      : assert(keyId != null);

  final int keyId;

  final String debugName;

  final String keyLabel;

  @override
  int get hashCode => keyId.hashCode;

  @override
  bool operator ==(dynamic other) {
    if (other.runtimeType != runtimeType) {
      return false;
    }
    final LogicalKeyboardKey typedOther = other;
    return keyId == typedOther.keyId;
  }

  static LogicalKeyboardKey findKeyByKeyId(int keyId) =>
      _knownLogicalKeys[keyId];

  @override
  void debugFillProperties(DiagnosticPropertiesBuilder properties) {
    super.debugFillProperties(properties);
    properties.add(StringProperty(
        'keyId', '0x${keyId.toRadixString(16).padLeft(8, '0')}',
        showName: true));
    properties.add(StringProperty('keyLabel', keyLabel, showName: true));
    properties.add(StringProperty('debugName', debugName,
        showName: true, defaultValue: null));
  }

  static bool isControlCharacter(String label) {
    if (label.length > 1) {
      return false;
    }
    final int codeUnit = label.codeUnitAt(0);
    return (codeUnit <= 0x1f && codeUnit >= 0x00) ||
        (codeUnit >= 0x7f && codeUnit <= 0x9f);
  }

  bool get isAutogenerated => (keyId & autogeneratedMask) != 0;

  static const int valueMask = 0x000FFFFFFFF;

  static const int platformMask = 0x0FF00000000;

  static const int autogeneratedMask = 0x10000000000;

  static const int unicodePlane = 0x00000000000;

  static const int hidPlane = 0x00100000000;

  static const LogicalKeyboardKey none = LogicalKeyboardKey(0x00100000000,
      debugName: kReleaseMode ? null : 'None');

  static const LogicalKeyboardKey hyper = LogicalKeyboardKey(0x00100000010,
      debugName: kReleaseMode ? null : 'Hyper');

  static const LogicalKeyboardKey superKey = LogicalKeyboardKey(0x00100000011,
      debugName: kReleaseMode ? null : 'Super Key');

  static const LogicalKeyboardKey fn =
      LogicalKeyboardKey(0x00100000012, debugName: kReleaseMode ? null : 'Fn');

  static const LogicalKeyboardKey fnLock = LogicalKeyboardKey(0x00100000013,
      debugName: kReleaseMode ? null : 'Fn Lock');

  static const LogicalKeyboardKey suspend = LogicalKeyboardKey(0x00100000014,
      debugName: kReleaseMode ? null : 'Suspend');

  static const LogicalKeyboardKey resume = LogicalKeyboardKey(0x00100000015,
      debugName: kReleaseMode ? null : 'Resume');

  static const LogicalKeyboardKey turbo = LogicalKeyboardKey(0x00100000016,
      debugName: kReleaseMode ? null : 'Turbo');

  static const LogicalKeyboardKey sleep = LogicalKeyboardKey(0x00100010082,
      debugName: kReleaseMode ? null : 'Sleep');

  static const LogicalKeyboardKey wakeUp = LogicalKeyboardKey(0x00100010083,
      debugName: kReleaseMode ? null : 'Wake Up');

  static const LogicalKeyboardKey displayToggleIntExt = LogicalKeyboardKey(
      0x001000100b5,
      debugName: kReleaseMode ? null : 'Display Toggle Int Ext');

  static const LogicalKeyboardKey usbReserved = LogicalKeyboardKey(
      0x00100070000,
      debugName: kReleaseMode ? null : 'Usb Reserved');

  static const LogicalKeyboardKey usbErrorRollOver = LogicalKeyboardKey(
      0x00100070001,
      debugName: kReleaseMode ? null : 'Usb Error Roll Over');

  static const LogicalKeyboardKey usbPostFail = LogicalKeyboardKey(
      0x00100070002,
      debugName: kReleaseMode ? null : 'Usb Post Fail');

  static const LogicalKeyboardKey usbErrorUndefined = LogicalKeyboardKey(
      0x00100070003,
      debugName: kReleaseMode ? null : 'Usb Error Undefined');

  static const LogicalKeyboardKey keyA = LogicalKeyboardKey(0x00000000061,
      keyLabel: r'a', debugName: kReleaseMode ? null : 'Key A');

  static const LogicalKeyboardKey keyB = LogicalKeyboardKey(0x00000000062,
      keyLabel: r'b', debugName: kReleaseMode ? null : 'Key B');

  static const LogicalKeyboardKey keyC = LogicalKeyboardKey(0x00000000063,
      keyLabel: r'c', debugName: kReleaseMode ? null : 'Key C');

  static const LogicalKeyboardKey keyD = LogicalKeyboardKey(0x00000000064,
      keyLabel: r'd', debugName: kReleaseMode ? null : 'Key D');

  static const LogicalKeyboardKey keyE = LogicalKeyboardKey(0x00000000065,
      keyLabel: r'e', debugName: kReleaseMode ? null : 'Key E');

  static const LogicalKeyboardKey keyF = LogicalKeyboardKey(0x00000000066,
      keyLabel: r'f', debugName: kReleaseMode ? null : 'Key F');

  static const LogicalKeyboardKey keyG = LogicalKeyboardKey(0x00000000067,
      keyLabel: r'g', debugName: kReleaseMode ? null : 'Key G');

  static const LogicalKeyboardKey keyH = LogicalKeyboardKey(0x00000000068,
      keyLabel: r'h', debugName: kReleaseMode ? null : 'Key H');

  static const LogicalKeyboardKey keyI = LogicalKeyboardKey(0x00000000069,
      keyLabel: r'i', debugName: kReleaseMode ? null : 'Key I');

  static const LogicalKeyboardKey keyJ = LogicalKeyboardKey(0x0000000006a,
      keyLabel: r'j', debugName: kReleaseMode ? null : 'Key J');

  static const LogicalKeyboardKey keyK = LogicalKeyboardKey(0x0000000006b,
      keyLabel: r'k', debugName: kReleaseMode ? null : 'Key K');

  static const LogicalKeyboardKey keyL = LogicalKeyboardKey(0x0000000006c,
      keyLabel: r'l', debugName: kReleaseMode ? null : 'Key L');

  static const LogicalKeyboardKey keyM = LogicalKeyboardKey(0x0000000006d,
      keyLabel: r'm', debugName: kReleaseMode ? null : 'Key M');

  static const LogicalKeyboardKey keyN = LogicalKeyboardKey(0x0000000006e,
      keyLabel: r'n', debugName: kReleaseMode ? null : 'Key N');

  static const LogicalKeyboardKey keyO = LogicalKeyboardKey(0x0000000006f,
      keyLabel: r'o', debugName: kReleaseMode ? null : 'Key O');

  static const LogicalKeyboardKey keyP = LogicalKeyboardKey(0x00000000070,
      keyLabel: r'p', debugName: kReleaseMode ? null : 'Key P');

  static const LogicalKeyboardKey keyQ = LogicalKeyboardKey(0x00000000071,
      keyLabel: r'q', debugName: kReleaseMode ? null : 'Key Q');

  static const LogicalKeyboardKey keyR = LogicalKeyboardKey(0x00000000072,
      keyLabel: r'r', debugName: kReleaseMode ? null : 'Key R');

  static const LogicalKeyboardKey keyS = LogicalKeyboardKey(0x00000000073,
      keyLabel: r's', debugName: kReleaseMode ? null : 'Key S');

  static const LogicalKeyboardKey keyT = LogicalKeyboardKey(0x00000000074,
      keyLabel: r't', debugName: kReleaseMode ? null : 'Key T');

  static const LogicalKeyboardKey keyU = LogicalKeyboardKey(0x00000000075,
      keyLabel: r'u', debugName: kReleaseMode ? null : 'Key U');

  static const LogicalKeyboardKey keyV = LogicalKeyboardKey(0x00000000076,
      keyLabel: r'v', debugName: kReleaseMode ? null : 'Key V');

  static const LogicalKeyboardKey keyW = LogicalKeyboardKey(0x00000000077,
      keyLabel: r'w', debugName: kReleaseMode ? null : 'Key W');

  static const LogicalKeyboardKey keyX = LogicalKeyboardKey(0x00000000078,
      keyLabel: r'x', debugName: kReleaseMode ? null : 'Key X');

  static const LogicalKeyboardKey keyY = LogicalKeyboardKey(0x00000000079,
      keyLabel: r'y', debugName: kReleaseMode ? null : 'Key Y');

  static const LogicalKeyboardKey keyZ = LogicalKeyboardKey(0x0000000007a,
      keyLabel: r'z', debugName: kReleaseMode ? null : 'Key Z');

  static const LogicalKeyboardKey digit1 = LogicalKeyboardKey(0x00000000031,
      keyLabel: r'1', debugName: kReleaseMode ? null : 'Digit 1');

  static const LogicalKeyboardKey digit2 = LogicalKeyboardKey(0x00000000032,
      keyLabel: r'2', debugName: kReleaseMode ? null : 'Digit 2');

  static const LogicalKeyboardKey digit3 = LogicalKeyboardKey(0x00000000033,
      keyLabel: r'3', debugName: kReleaseMode ? null : 'Digit 3');

  static const LogicalKeyboardKey digit4 = LogicalKeyboardKey(0x00000000034,
      keyLabel: r'4', debugName: kReleaseMode ? null : 'Digit 4');

  static const LogicalKeyboardKey digit5 = LogicalKeyboardKey(0x00000000035,
      keyLabel: r'5', debugName: kReleaseMode ? null : 'Digit 5');

  static const LogicalKeyboardKey digit6 = LogicalKeyboardKey(0x00000000036,
      keyLabel: r'6', debugName: kReleaseMode ? null : 'Digit 6');

  static const LogicalKeyboardKey digit7 = LogicalKeyboardKey(0x00000000037,
      keyLabel: r'7', debugName: kReleaseMode ? null : 'Digit 7');

  static const LogicalKeyboardKey digit8 = LogicalKeyboardKey(0x00000000038,
      keyLabel: r'8', debugName: kReleaseMode ? null : 'Digit 8');

  static const LogicalKeyboardKey digit9 = LogicalKeyboardKey(0x00000000039,
      keyLabel: r'9', debugName: kReleaseMode ? null : 'Digit 9');

  static const LogicalKeyboardKey digit0 = LogicalKeyboardKey(0x00000000030,
      keyLabel: r'0', debugName: kReleaseMode ? null : 'Digit 0');

  static const LogicalKeyboardKey enter = LogicalKeyboardKey(0x00100070028,
      debugName: kReleaseMode ? null : 'Enter');

  static const LogicalKeyboardKey escape = LogicalKeyboardKey(0x00100070029,
      debugName: kReleaseMode ? null : 'Escape');

  static const LogicalKeyboardKey backspace = LogicalKeyboardKey(0x0010007002a,
      debugName: kReleaseMode ? null : 'Backspace');

  static const LogicalKeyboardKey tab =
      LogicalKeyboardKey(0x0010007002b, debugName: kReleaseMode ? null : 'Tab');

  static const LogicalKeyboardKey space = LogicalKeyboardKey(0x00000000020,
      keyLabel: r' ', debugName: kReleaseMode ? null : 'Space');

  static const LogicalKeyboardKey minus = LogicalKeyboardKey(0x0000000002d,
      keyLabel: r'-', debugName: kReleaseMode ? null : 'Minus');

  static const LogicalKeyboardKey equal = LogicalKeyboardKey(0x0000000003d,
      keyLabel: r'=', debugName: kReleaseMode ? null : 'Equal');

  static const LogicalKeyboardKey bracketLeft = LogicalKeyboardKey(
      0x0000000005b,
      keyLabel: r'[',
      debugName: kReleaseMode ? null : 'Bracket Left');

  static const LogicalKeyboardKey bracketRight = LogicalKeyboardKey(
      0x0000000005d,
      keyLabel: r']',
      debugName: kReleaseMode ? null : 'Bracket Right');

  static const LogicalKeyboardKey backslash = LogicalKeyboardKey(0x0000000005c,
      keyLabel: r'\', debugName: kReleaseMode ? null : 'Backslash');

  static const LogicalKeyboardKey semicolon = LogicalKeyboardKey(0x0000000003b,
      keyLabel: r';', debugName: kReleaseMode ? null : 'Semicolon');

  static const LogicalKeyboardKey quote = LogicalKeyboardKey(0x00000000027,
      keyLabel: r"'", debugName: kReleaseMode ? null : 'Quote');

  static const LogicalKeyboardKey backquote = LogicalKeyboardKey(0x00000000060,
      keyLabel: r'`', debugName: kReleaseMode ? null : 'Backquote');

  static const LogicalKeyboardKey comma = LogicalKeyboardKey(0x0000000002c,
      keyLabel: r',', debugName: kReleaseMode ? null : 'Comma');

  static const LogicalKeyboardKey period = LogicalKeyboardKey(0x0000000002e,
      keyLabel: r'.', debugName: kReleaseMode ? null : 'Period');

  static const LogicalKeyboardKey slash = LogicalKeyboardKey(0x0000000002f,
      keyLabel: r'/', debugName: kReleaseMode ? null : 'Slash');

  static const LogicalKeyboardKey capsLock = LogicalKeyboardKey(0x00100070039,
      debugName: kReleaseMode ? null : 'Caps Lock');

  static const LogicalKeyboardKey f1 =
      LogicalKeyboardKey(0x0010007003a, debugName: kReleaseMode ? null : 'F1');

  static const LogicalKeyboardKey f2 =
      LogicalKeyboardKey(0x0010007003b, debugName: kReleaseMode ? null : 'F2');

  static const LogicalKeyboardKey f3 =
      LogicalKeyboardKey(0x0010007003c, debugName: kReleaseMode ? null : 'F3');

  static const LogicalKeyboardKey f4 =
      LogicalKeyboardKey(0x0010007003d, debugName: kReleaseMode ? null : 'F4');

  static const LogicalKeyboardKey f5 =
      LogicalKeyboardKey(0x0010007003e, debugName: kReleaseMode ? null : 'F5');

  static const LogicalKeyboardKey f6 =
      LogicalKeyboardKey(0x0010007003f, debugName: kReleaseMode ? null : 'F6');

  static const LogicalKeyboardKey f7 =
      LogicalKeyboardKey(0x00100070040, debugName: kReleaseMode ? null : 'F7');

  static const LogicalKeyboardKey f8 =
      LogicalKeyboardKey(0x00100070041, debugName: kReleaseMode ? null : 'F8');

  static const LogicalKeyboardKey f9 =
      LogicalKeyboardKey(0x00100070042, debugName: kReleaseMode ? null : 'F9');

  static const LogicalKeyboardKey f10 =
      LogicalKeyboardKey(0x00100070043, debugName: kReleaseMode ? null : 'F10');

  static const LogicalKeyboardKey f11 =
      LogicalKeyboardKey(0x00100070044, debugName: kReleaseMode ? null : 'F11');

  static const LogicalKeyboardKey f12 =
      LogicalKeyboardKey(0x00100070045, debugName: kReleaseMode ? null : 'F12');

  static const LogicalKeyboardKey printScreen = LogicalKeyboardKey(
      0x00100070046,
      debugName: kReleaseMode ? null : 'Print Screen');

  static const LogicalKeyboardKey scrollLock = LogicalKeyboardKey(0x00100070047,
      debugName: kReleaseMode ? null : 'Scroll Lock');

  static const LogicalKeyboardKey pause = LogicalKeyboardKey(0x00100070048,
      debugName: kReleaseMode ? null : 'Pause');

  static const LogicalKeyboardKey insert = LogicalKeyboardKey(0x00100070049,
      debugName: kReleaseMode ? null : 'Insert');

  static const LogicalKeyboardKey home = LogicalKeyboardKey(0x0010007004a,
      debugName: kReleaseMode ? null : 'Home');

  static const LogicalKeyboardKey pageUp = LogicalKeyboardKey(0x0010007004b,
      debugName: kReleaseMode ? null : 'Page Up');

  static const LogicalKeyboardKey delete = LogicalKeyboardKey(0x0010007004c,
      debugName: kReleaseMode ? null : 'Delete');

  static const LogicalKeyboardKey end =
      LogicalKeyboardKey(0x0010007004d, debugName: kReleaseMode ? null : 'End');

  static const LogicalKeyboardKey pageDown = LogicalKeyboardKey(0x0010007004e,
      debugName: kReleaseMode ? null : 'Page Down');

  static const LogicalKeyboardKey arrowRight = LogicalKeyboardKey(0x0010007004f,
      debugName: kReleaseMode ? null : 'Arrow Right');

  static const LogicalKeyboardKey arrowLeft = LogicalKeyboardKey(0x00100070050,
      debugName: kReleaseMode ? null : 'Arrow Left');

  static const LogicalKeyboardKey arrowDown = LogicalKeyboardKey(0x00100070051,
      debugName: kReleaseMode ? null : 'Arrow Down');

  static const LogicalKeyboardKey arrowUp = LogicalKeyboardKey(0x00100070052,
      debugName: kReleaseMode ? null : 'Arrow Up');

  static const LogicalKeyboardKey numLock = LogicalKeyboardKey(0x00100070053,
      debugName: kReleaseMode ? null : 'Num Lock');

  static const LogicalKeyboardKey numpadDivide = LogicalKeyboardKey(
      0x00100070054,
      keyLabel: r'/',
      debugName: kReleaseMode ? null : 'Numpad Divide');

  static const LogicalKeyboardKey numpadMultiply = LogicalKeyboardKey(
      0x00100070055,
      keyLabel: r'*',
      debugName: kReleaseMode ? null : 'Numpad Multiply');

  static const LogicalKeyboardKey numpadSubtract = LogicalKeyboardKey(
      0x00100070056,
      keyLabel: r'-',
      debugName: kReleaseMode ? null : 'Numpad Subtract');

  static const LogicalKeyboardKey numpadAdd = LogicalKeyboardKey(0x00100070057,
      keyLabel: r'+', debugName: kReleaseMode ? null : 'Numpad Add');

  static const LogicalKeyboardKey numpadEnter = LogicalKeyboardKey(
      0x00100070058,
      debugName: kReleaseMode ? null : 'Numpad Enter');

  static const LogicalKeyboardKey numpad1 = LogicalKeyboardKey(0x00100070059,
      keyLabel: r'1', debugName: kReleaseMode ? null : 'Numpad 1');

  static const LogicalKeyboardKey numpad2 = LogicalKeyboardKey(0x0010007005a,
      keyLabel: r'2', debugName: kReleaseMode ? null : 'Numpad 2');

  static const LogicalKeyboardKey numpad3 = LogicalKeyboardKey(0x0010007005b,
      keyLabel: r'3', debugName: kReleaseMode ? null : 'Numpad 3');

  static const LogicalKeyboardKey numpad4 = LogicalKeyboardKey(0x0010007005c,
      keyLabel: r'4', debugName: kReleaseMode ? null : 'Numpad 4');

  static const LogicalKeyboardKey numpad5 = LogicalKeyboardKey(0x0010007005d,
      keyLabel: r'5', debugName: kReleaseMode ? null : 'Numpad 5');

  static const LogicalKeyboardKey numpad6 = LogicalKeyboardKey(0x0010007005e,
      keyLabel: r'6', debugName: kReleaseMode ? null : 'Numpad 6');

  static const LogicalKeyboardKey numpad7 = LogicalKeyboardKey(0x0010007005f,
      keyLabel: r'7', debugName: kReleaseMode ? null : 'Numpad 7');

  static const LogicalKeyboardKey numpad8 = LogicalKeyboardKey(0x00100070060,
      keyLabel: r'8', debugName: kReleaseMode ? null : 'Numpad 8');

  static const LogicalKeyboardKey numpad9 = LogicalKeyboardKey(0x00100070061,
      keyLabel: r'9', debugName: kReleaseMode ? null : 'Numpad 9');

  static const LogicalKeyboardKey numpad0 = LogicalKeyboardKey(0x00100070062,
      keyLabel: r'0', debugName: kReleaseMode ? null : 'Numpad 0');

  static const LogicalKeyboardKey numpadDecimal = LogicalKeyboardKey(
      0x00100070063,
      keyLabel: r'.',
      debugName: kReleaseMode ? null : 'Numpad Decimal');

  static const LogicalKeyboardKey intlBackslash = LogicalKeyboardKey(
      0x00100070064,
      debugName: kReleaseMode ? null : 'Intl Backslash');

  static const LogicalKeyboardKey contextMenu = LogicalKeyboardKey(
      0x00100070065,
      debugName: kReleaseMode ? null : 'Context Menu');

  static const LogicalKeyboardKey power = LogicalKeyboardKey(0x00100070066,
      debugName: kReleaseMode ? null : 'Power');

  static const LogicalKeyboardKey numpadEqual = LogicalKeyboardKey(
      0x00100070067,
      keyLabel: r'=',
      debugName: kReleaseMode ? null : 'Numpad Equal');

  static const LogicalKeyboardKey f13 =
      LogicalKeyboardKey(0x00100070068, debugName: kReleaseMode ? null : 'F13');

  static const LogicalKeyboardKey f14 =
      LogicalKeyboardKey(0x00100070069, debugName: kReleaseMode ? null : 'F14');

  static const LogicalKeyboardKey f15 =
      LogicalKeyboardKey(0x0010007006a, debugName: kReleaseMode ? null : 'F15');

  static const LogicalKeyboardKey f16 =
      LogicalKeyboardKey(0x0010007006b, debugName: kReleaseMode ? null : 'F16');

  static const LogicalKeyboardKey f17 =
      LogicalKeyboardKey(0x0010007006c, debugName: kReleaseMode ? null : 'F17');

  static const LogicalKeyboardKey f18 =
      LogicalKeyboardKey(0x0010007006d, debugName: kReleaseMode ? null : 'F18');

  static const LogicalKeyboardKey f19 =
      LogicalKeyboardKey(0x0010007006e, debugName: kReleaseMode ? null : 'F19');

  static const LogicalKeyboardKey f20 =
      LogicalKeyboardKey(0x0010007006f, debugName: kReleaseMode ? null : 'F20');

  static const LogicalKeyboardKey f21 =
      LogicalKeyboardKey(0x00100070070, debugName: kReleaseMode ? null : 'F21');

  static const LogicalKeyboardKey f22 =
      LogicalKeyboardKey(0x00100070071, debugName: kReleaseMode ? null : 'F22');

  static const LogicalKeyboardKey f23 =
      LogicalKeyboardKey(0x00100070072, debugName: kReleaseMode ? null : 'F23');

  static const LogicalKeyboardKey f24 =
      LogicalKeyboardKey(0x00100070073, debugName: kReleaseMode ? null : 'F24');

  static const LogicalKeyboardKey open = LogicalKeyboardKey(0x00100070074,
      debugName: kReleaseMode ? null : 'Open');

  static const LogicalKeyboardKey help = LogicalKeyboardKey(0x00100070075,
      debugName: kReleaseMode ? null : 'Help');

  static const LogicalKeyboardKey select = LogicalKeyboardKey(0x00100070077,
      debugName: kReleaseMode ? null : 'Select');

  static const LogicalKeyboardKey again = LogicalKeyboardKey(0x00100070079,
      debugName: kReleaseMode ? null : 'Again');

  static const LogicalKeyboardKey undo = LogicalKeyboardKey(0x0010007007a,
      debugName: kReleaseMode ? null : 'Undo');

  static const LogicalKeyboardKey cut =
      LogicalKeyboardKey(0x0010007007b, debugName: kReleaseMode ? null : 'Cut');

  static const LogicalKeyboardKey copy = LogicalKeyboardKey(0x0010007007c,
      debugName: kReleaseMode ? null : 'Copy');

  static const LogicalKeyboardKey paste = LogicalKeyboardKey(0x0010007007d,
      debugName: kReleaseMode ? null : 'Paste');

  static const LogicalKeyboardKey find = LogicalKeyboardKey(0x0010007007e,
      debugName: kReleaseMode ? null : 'Find');

  static const LogicalKeyboardKey audioVolumeMute = LogicalKeyboardKey(
      0x0010007007f,
      debugName: kReleaseMode ? null : 'Audio Volume Mute');

  static const LogicalKeyboardKey audioVolumeUp = LogicalKeyboardKey(
      0x00100070080,
      debugName: kReleaseMode ? null : 'Audio Volume Up');

  static const LogicalKeyboardKey audioVolumeDown = LogicalKeyboardKey(
      0x00100070081,
      debugName: kReleaseMode ? null : 'Audio Volume Down');

  static const LogicalKeyboardKey numpadComma = LogicalKeyboardKey(
      0x00100070085,
      keyLabel: r',',
      debugName: kReleaseMode ? null : 'Numpad Comma');

  static const LogicalKeyboardKey intlRo = LogicalKeyboardKey(0x00100070087,
      debugName: kReleaseMode ? null : 'Intl Ro');

  static const LogicalKeyboardKey kanaMode = LogicalKeyboardKey(0x00100070088,
      debugName: kReleaseMode ? null : 'Kana Mode');

  static const LogicalKeyboardKey intlYen = LogicalKeyboardKey(0x00100070089,
      debugName: kReleaseMode ? null : 'Intl Yen');

  static const LogicalKeyboardKey convert = LogicalKeyboardKey(0x0010007008a,
      debugName: kReleaseMode ? null : 'Convert');

  static const LogicalKeyboardKey nonConvert = LogicalKeyboardKey(0x0010007008b,
      debugName: kReleaseMode ? null : 'Non Convert');

  static const LogicalKeyboardKey lang1 = LogicalKeyboardKey(0x00100070090,
      debugName: kReleaseMode ? null : 'Lang 1');

  static const LogicalKeyboardKey lang2 = LogicalKeyboardKey(0x00100070091,
      debugName: kReleaseMode ? null : 'Lang 2');

  static const LogicalKeyboardKey lang3 = LogicalKeyboardKey(0x00100070092,
      debugName: kReleaseMode ? null : 'Lang 3');

  static const LogicalKeyboardKey lang4 = LogicalKeyboardKey(0x00100070093,
      debugName: kReleaseMode ? null : 'Lang 4');

  static const LogicalKeyboardKey lang5 = LogicalKeyboardKey(0x00100070094,
      debugName: kReleaseMode ? null : 'Lang 5');

  static const LogicalKeyboardKey abort = LogicalKeyboardKey(0x0010007009b,
      debugName: kReleaseMode ? null : 'Abort');

  static const LogicalKeyboardKey props = LogicalKeyboardKey(0x001000700a3,
      debugName: kReleaseMode ? null : 'Props');

  static const LogicalKeyboardKey numpadParenLeft = LogicalKeyboardKey(
      0x001000700b6,
      keyLabel: r'(',
      debugName: kReleaseMode ? null : 'Numpad Paren Left');

  static const LogicalKeyboardKey numpadParenRight = LogicalKeyboardKey(
      0x001000700b7,
      keyLabel: r')',
      debugName: kReleaseMode ? null : 'Numpad Paren Right');

  static const LogicalKeyboardKey numpadBackspace = LogicalKeyboardKey(
      0x001000700bb,
      debugName: kReleaseMode ? null : 'Numpad Backspace');

  static const LogicalKeyboardKey numpadMemoryStore = LogicalKeyboardKey(
      0x001000700d0,
      debugName: kReleaseMode ? null : 'Numpad Memory Store');

  static const LogicalKeyboardKey numpadMemoryRecall = LogicalKeyboardKey(
      0x001000700d1,
      debugName: kReleaseMode ? null : 'Numpad Memory Recall');

  static const LogicalKeyboardKey numpadMemoryClear = LogicalKeyboardKey(
      0x001000700d2,
      debugName: kReleaseMode ? null : 'Numpad Memory Clear');

  static const LogicalKeyboardKey numpadMemoryAdd = LogicalKeyboardKey(
      0x001000700d3,
      debugName: kReleaseMode ? null : 'Numpad Memory Add');

  static const LogicalKeyboardKey numpadMemorySubtract = LogicalKeyboardKey(
      0x001000700d4,
      debugName: kReleaseMode ? null : 'Numpad Memory Subtract');

  static const LogicalKeyboardKey numpadSignChange = LogicalKeyboardKey(
      0x001000700d7,
      debugName: kReleaseMode ? null : 'Numpad Sign Change');

  static const LogicalKeyboardKey numpadClear = LogicalKeyboardKey(
      0x001000700d8,
      debugName: kReleaseMode ? null : 'Numpad Clear');

  static const LogicalKeyboardKey numpadClearEntry = LogicalKeyboardKey(
      0x001000700d9,
      debugName: kReleaseMode ? null : 'Numpad Clear Entry');

  static const LogicalKeyboardKey controlLeft = LogicalKeyboardKey(
      0x001000700e0,
      debugName: kReleaseMode ? null : 'Control Left');

  static const LogicalKeyboardKey shiftLeft = LogicalKeyboardKey(0x001000700e1,
      debugName: kReleaseMode ? null : 'Shift Left');

  static const LogicalKeyboardKey altLeft = LogicalKeyboardKey(0x001000700e2,
      debugName: kReleaseMode ? null : 'Alt Left');

  static const LogicalKeyboardKey metaLeft = LogicalKeyboardKey(0x001000700e3,
      debugName: kReleaseMode ? null : 'Meta Left');

  static const LogicalKeyboardKey controlRight = LogicalKeyboardKey(
      0x001000700e4,
      debugName: kReleaseMode ? null : 'Control Right');

  static const LogicalKeyboardKey shiftRight = LogicalKeyboardKey(0x001000700e5,
      debugName: kReleaseMode ? null : 'Shift Right');

  static const LogicalKeyboardKey altRight = LogicalKeyboardKey(0x001000700e6,
      debugName: kReleaseMode ? null : 'Alt Right');

  static const LogicalKeyboardKey metaRight = LogicalKeyboardKey(0x001000700e7,
      debugName: kReleaseMode ? null : 'Meta Right');

  static const LogicalKeyboardKey info = LogicalKeyboardKey(0x001000c0060,
      debugName: kReleaseMode ? null : 'Info');

  static const LogicalKeyboardKey closedCaptionToggle = LogicalKeyboardKey(
      0x001000c0061,
      debugName: kReleaseMode ? null : 'Closed Caption Toggle');

  static const LogicalKeyboardKey brightnessUp = LogicalKeyboardKey(
      0x001000c006f,
      debugName: kReleaseMode ? null : 'Brightness Up');

  static const LogicalKeyboardKey brightnessDown = LogicalKeyboardKey(
      0x001000c0070,
      debugName: kReleaseMode ? null : 'Brightness Down');

  static const LogicalKeyboardKey brightnessToggle = LogicalKeyboardKey(
      0x001000c0072,
      debugName: kReleaseMode ? null : 'Brightness Toggle');

  static const LogicalKeyboardKey brightnessMinimum = LogicalKeyboardKey(
      0x001000c0073,
      debugName: kReleaseMode ? null : 'Brightness Minimum');

  static const LogicalKeyboardKey brightnessMaximum = LogicalKeyboardKey(
      0x001000c0074,
      debugName: kReleaseMode ? null : 'Brightness Maximum');

  static const LogicalKeyboardKey brightnessAuto = LogicalKeyboardKey(
      0x001000c0075,
      debugName: kReleaseMode ? null : 'Brightness Auto');

  static const LogicalKeyboardKey mediaLast = LogicalKeyboardKey(0x001000c0083,
      debugName: kReleaseMode ? null : 'Media Last');

  static const LogicalKeyboardKey launchPhone = LogicalKeyboardKey(
      0x001000c008c,
      debugName: kReleaseMode ? null : 'Launch Phone');

  static const LogicalKeyboardKey programGuide = LogicalKeyboardKey(
      0x001000c008d,
      debugName: kReleaseMode ? null : 'Program Guide');

  static const LogicalKeyboardKey exit = LogicalKeyboardKey(0x001000c0094,
      debugName: kReleaseMode ? null : 'Exit');

  static const LogicalKeyboardKey channelUp = LogicalKeyboardKey(0x001000c009c,
      debugName: kReleaseMode ? null : 'Channel Up');

  static const LogicalKeyboardKey channelDown = LogicalKeyboardKey(
      0x001000c009d,
      debugName: kReleaseMode ? null : 'Channel Down');

  static const LogicalKeyboardKey mediaPlay = LogicalKeyboardKey(0x001000c00b0,
      debugName: kReleaseMode ? null : 'Media Play');

  static const LogicalKeyboardKey mediaRecord = LogicalKeyboardKey(
      0x001000c00b2,
      debugName: kReleaseMode ? null : 'Media Record');

  static const LogicalKeyboardKey mediaFastForward = LogicalKeyboardKey(
      0x001000c00b3,
      debugName: kReleaseMode ? null : 'Media Fast Forward');

  static const LogicalKeyboardKey mediaRewind = LogicalKeyboardKey(
      0x001000c00b4,
      debugName: kReleaseMode ? null : 'Media Rewind');

  static const LogicalKeyboardKey mediaTrackNext = LogicalKeyboardKey(
      0x001000c00b5,
      debugName: kReleaseMode ? null : 'Media Track Next');

  static const LogicalKeyboardKey mediaTrackPrevious = LogicalKeyboardKey(
      0x001000c00b6,
      debugName: kReleaseMode ? null : 'Media Track Previous');

  static const LogicalKeyboardKey mediaStop = LogicalKeyboardKey(0x001000c00b7,
      debugName: kReleaseMode ? null : 'Media Stop');

  static const LogicalKeyboardKey eject = LogicalKeyboardKey(0x001000c00b8,
      debugName: kReleaseMode ? null : 'Eject');

  static const LogicalKeyboardKey mediaPlayPause = LogicalKeyboardKey(
      0x001000c00cd,
      debugName: kReleaseMode ? null : 'Media Play Pause');

  static const LogicalKeyboardKey speechInputToggle = LogicalKeyboardKey(
      0x001000c00cf,
      debugName: kReleaseMode ? null : 'Speech Input Toggle');

  static const LogicalKeyboardKey bassBoost = LogicalKeyboardKey(0x001000c00e5,
      debugName: kReleaseMode ? null : 'Bass Boost');

  static const LogicalKeyboardKey mediaSelect = LogicalKeyboardKey(
      0x001000c0183,
      debugName: kReleaseMode ? null : 'Media Select');

  static const LogicalKeyboardKey launchWordProcessor = LogicalKeyboardKey(
      0x001000c0184,
      debugName: kReleaseMode ? null : 'Launch Word Processor');

  static const LogicalKeyboardKey launchSpreadsheet = LogicalKeyboardKey(
      0x001000c0186,
      debugName: kReleaseMode ? null : 'Launch Spreadsheet');

  static const LogicalKeyboardKey launchMail = LogicalKeyboardKey(0x001000c018a,
      debugName: kReleaseMode ? null : 'Launch Mail');

  static const LogicalKeyboardKey launchContacts = LogicalKeyboardKey(
      0x001000c018d,
      debugName: kReleaseMode ? null : 'Launch Contacts');

  static const LogicalKeyboardKey launchCalendar = LogicalKeyboardKey(
      0x001000c018e,
      debugName: kReleaseMode ? null : 'Launch Calendar');

  static const LogicalKeyboardKey launchApp2 = LogicalKeyboardKey(0x001000c0192,
      debugName: kReleaseMode ? null : 'Launch App2');

  static const LogicalKeyboardKey launchApp1 = LogicalKeyboardKey(0x001000c0194,
      debugName: kReleaseMode ? null : 'Launch App1');

  static const LogicalKeyboardKey launchInternetBrowser = LogicalKeyboardKey(
      0x001000c0196,
      debugName: kReleaseMode ? null : 'Launch Internet Browser');

  static const LogicalKeyboardKey logOff = LogicalKeyboardKey(0x001000c019c,
      debugName: kReleaseMode ? null : 'Log Off');

  static const LogicalKeyboardKey lockScreen = LogicalKeyboardKey(0x001000c019e,
      debugName: kReleaseMode ? null : 'Lock Screen');

  static const LogicalKeyboardKey launchControlPanel = LogicalKeyboardKey(
      0x001000c019f,
      debugName: kReleaseMode ? null : 'Launch Control Panel');

  static const LogicalKeyboardKey selectTask = LogicalKeyboardKey(0x001000c01a2,
      debugName: kReleaseMode ? null : 'Select Task');

  static const LogicalKeyboardKey launchDocuments = LogicalKeyboardKey(
      0x001000c01a7,
      debugName: kReleaseMode ? null : 'Launch Documents');

  static const LogicalKeyboardKey spellCheck = LogicalKeyboardKey(0x001000c01ab,
      debugName: kReleaseMode ? null : 'Spell Check');

  static const LogicalKeyboardKey launchKeyboardLayout = LogicalKeyboardKey(
      0x001000c01ae,
      debugName: kReleaseMode ? null : 'Launch Keyboard Layout');

  static const LogicalKeyboardKey launchScreenSaver = LogicalKeyboardKey(
      0x001000c01b1,
      debugName: kReleaseMode ? null : 'Launch Screen Saver');

  static const LogicalKeyboardKey launchAssistant = LogicalKeyboardKey(
      0x001000c01cb,
      debugName: kReleaseMode ? null : 'Launch Assistant');

  static const LogicalKeyboardKey launchAudioBrowser = LogicalKeyboardKey(
      0x001000c01b7,
      debugName: kReleaseMode ? null : 'Launch Audio Browser');

  static const LogicalKeyboardKey newKey = LogicalKeyboardKey(0x001000c0201,
      debugName: kReleaseMode ? null : 'New Key');

  static const LogicalKeyboardKey close = LogicalKeyboardKey(0x001000c0203,
      debugName: kReleaseMode ? null : 'Close');

  static const LogicalKeyboardKey save = LogicalKeyboardKey(0x001000c0207,
      debugName: kReleaseMode ? null : 'Save');

  static const LogicalKeyboardKey print = LogicalKeyboardKey(0x001000c0208,
      debugName: kReleaseMode ? null : 'Print');

  static const LogicalKeyboardKey browserSearch = LogicalKeyboardKey(
      0x001000c0221,
      debugName: kReleaseMode ? null : 'Browser Search');

  static const LogicalKeyboardKey browserHome = LogicalKeyboardKey(
      0x001000c0223,
      debugName: kReleaseMode ? null : 'Browser Home');

  static const LogicalKeyboardKey browserBack = LogicalKeyboardKey(
      0x001000c0224,
      debugName: kReleaseMode ? null : 'Browser Back');

  static const LogicalKeyboardKey browserForward = LogicalKeyboardKey(
      0x001000c0225,
      debugName: kReleaseMode ? null : 'Browser Forward');

  static const LogicalKeyboardKey browserStop = LogicalKeyboardKey(
      0x001000c0226,
      debugName: kReleaseMode ? null : 'Browser Stop');

  static const LogicalKeyboardKey browserRefresh = LogicalKeyboardKey(
      0x001000c0227,
      debugName: kReleaseMode ? null : 'Browser Refresh');

  static const LogicalKeyboardKey browserFavorites = LogicalKeyboardKey(
      0x001000c022a,
      debugName: kReleaseMode ? null : 'Browser Favorites');

  static const LogicalKeyboardKey zoomIn = LogicalKeyboardKey(0x001000c022d,
      debugName: kReleaseMode ? null : 'Zoom In');

  static const LogicalKeyboardKey zoomOut = LogicalKeyboardKey(0x001000c022e,
      debugName: kReleaseMode ? null : 'Zoom Out');

  static const LogicalKeyboardKey zoomToggle = LogicalKeyboardKey(0x001000c0232,
      debugName: kReleaseMode ? null : 'Zoom Toggle');

  static const LogicalKeyboardKey redo = LogicalKeyboardKey(0x001000c0279,
      debugName: kReleaseMode ? null : 'Redo');

  static const LogicalKeyboardKey mailReply = LogicalKeyboardKey(0x001000c0289,
      debugName: kReleaseMode ? null : 'Mail Reply');

  static const LogicalKeyboardKey mailForward = LogicalKeyboardKey(
      0x001000c028b,
      debugName: kReleaseMode ? null : 'Mail Forward');

  static const LogicalKeyboardKey mailSend = LogicalKeyboardKey(0x001000c028c,
      debugName: kReleaseMode ? null : 'Mail Send');

  static const LogicalKeyboardKey showAllWindows = LogicalKeyboardKey(
      0x001000c029f,
      debugName: kReleaseMode ? null : 'Show All Windows');

  static const Map<int, LogicalKeyboardKey> _knownLogicalKeys =
      <int, LogicalKeyboardKey>{
    0x0100000000: none,
    0x0100000010: hyper,
    0x0100000011: superKey,
    0x0100000012: fn,
    0x0100000013: fnLock,
    0x0100000014: suspend,
    0x0100000015: resume,
    0x0100000016: turbo,
    0x0100010082: sleep,
    0x0100010083: wakeUp,
    0x01000100b5: displayToggleIntExt,
    0x0100070000: usbReserved,
    0x0100070001: usbErrorRollOver,
    0x0100070002: usbPostFail,
    0x0100070003: usbErrorUndefined,
    0x0000000061: keyA,
    0x0000000062: keyB,
    0x0000000063: keyC,
    0x0000000064: keyD,
    0x0000000065: keyE,
    0x0000000066: keyF,
    0x0000000067: keyG,
    0x0000000068: keyH,
    0x0000000069: keyI,
    0x000000006a: keyJ,
    0x000000006b: keyK,
    0x000000006c: keyL,
    0x000000006d: keyM,
    0x000000006e: keyN,
    0x000000006f: keyO,
    0x0000000070: keyP,
    0x0000000071: keyQ,
    0x0000000072: keyR,
    0x0000000073: keyS,
    0x0000000074: keyT,
    0x0000000075: keyU,
    0x0000000076: keyV,
    0x0000000077: keyW,
    0x0000000078: keyX,
    0x0000000079: keyY,
    0x000000007a: keyZ,
    0x0000000031: digit1,
    0x0000000032: digit2,
    0x0000000033: digit3,
    0x0000000034: digit4,
    0x0000000035: digit5,
    0x0000000036: digit6,
    0x0000000037: digit7,
    0x0000000038: digit8,
    0x0000000039: digit9,
    0x0000000030: digit0,
    0x0100070028: enter,
    0x0100070029: escape,
    0x010007002a: backspace,
    0x010007002b: tab,
    0x0000000020: space,
    0x000000002d: minus,
    0x000000003d: equal,
    0x000000005b: bracketLeft,
    0x000000005d: bracketRight,
    0x000000005c: backslash,
    0x000000003b: semicolon,
    0x0000000027: quote,
    0x0000000060: backquote,
    0x000000002c: comma,
    0x000000002e: period,
    0x000000002f: slash,
    0x0100070039: capsLock,
    0x010007003a: f1,
    0x010007003b: f2,
    0x010007003c: f3,
    0x010007003d: f4,
    0x010007003e: f5,
    0x010007003f: f6,
    0x0100070040: f7,
    0x0100070041: f8,
    0x0100070042: f9,
    0x0100070043: f10,
    0x0100070044: f11,
    0x0100070045: f12,
    0x0100070046: printScreen,
    0x0100070047: scrollLock,
    0x0100070048: pause,
    0x0100070049: insert,
    0x010007004a: home,
    0x010007004b: pageUp,
    0x010007004c: delete,
    0x010007004d: end,
    0x010007004e: pageDown,
    0x010007004f: arrowRight,
    0x0100070050: arrowLeft,
    0x0100070051: arrowDown,
    0x0100070052: arrowUp,
    0x0100070053: numLock,
    0x0100070054: numpadDivide,
    0x0100070055: numpadMultiply,
    0x0100070056: numpadSubtract,
    0x0100070057: numpadAdd,
    0x0100070058: numpadEnter,
    0x0100070059: numpad1,
    0x010007005a: numpad2,
    0x010007005b: numpad3,
    0x010007005c: numpad4,
    0x010007005d: numpad5,
    0x010007005e: numpad6,
    0x010007005f: numpad7,
    0x0100070060: numpad8,
    0x0100070061: numpad9,
    0x0100070062: numpad0,
    0x0100070063: numpadDecimal,
    0x0100070064: intlBackslash,
    0x0100070065: contextMenu,
    0x0100070066: power,
    0x0100070067: numpadEqual,
    0x0100070068: f13,
    0x0100070069: f14,
    0x010007006a: f15,
    0x010007006b: f16,
    0x010007006c: f17,
    0x010007006d: f18,
    0x010007006e: f19,
    0x010007006f: f20,
    0x0100070070: f21,
    0x0100070071: f22,
    0x0100070072: f23,
    0x0100070073: f24,
    0x0100070074: open,
    0x0100070075: help,
    0x0100070077: select,
    0x0100070079: again,
    0x010007007a: undo,
    0x010007007b: cut,
    0x010007007c: copy,
    0x010007007d: paste,
    0x010007007e: find,
    0x010007007f: audioVolumeMute,
    0x0100070080: audioVolumeUp,
    0x0100070081: audioVolumeDown,
    0x0100070085: numpadComma,
    0x0100070087: intlRo,
    0x0100070088: kanaMode,
    0x0100070089: intlYen,
    0x010007008a: convert,
    0x010007008b: nonConvert,
    0x0100070090: lang1,
    0x0100070091: lang2,
    0x0100070092: lang3,
    0x0100070093: lang4,
    0x0100070094: lang5,
    0x010007009b: abort,
    0x01000700a3: props,
    0x01000700b6: numpadParenLeft,
    0x01000700b7: numpadParenRight,
    0x01000700bb: numpadBackspace,
    0x01000700d0: numpadMemoryStore,
    0x01000700d1: numpadMemoryRecall,
    0x01000700d2: numpadMemoryClear,
    0x01000700d3: numpadMemoryAdd,
    0x01000700d4: numpadMemorySubtract,
    0x01000700d7: numpadSignChange,
    0x01000700d8: numpadClear,
    0x01000700d9: numpadClearEntry,
    0x01000700e0: controlLeft,
    0x01000700e1: shiftLeft,
    0x01000700e2: altLeft,
    0x01000700e3: metaLeft,
    0x01000700e4: controlRight,
    0x01000700e5: shiftRight,
    0x01000700e6: altRight,
    0x01000700e7: metaRight,
    0x01000c0060: info,
    0x01000c0061: closedCaptionToggle,
    0x01000c006f: brightnessUp,
    0x01000c0070: brightnessDown,
    0x01000c0072: brightnessToggle,
    0x01000c0073: brightnessMinimum,
    0x01000c0074: brightnessMaximum,
    0x01000c0075: brightnessAuto,
    0x01000c0083: mediaLast,
    0x01000c008c: launchPhone,
    0x01000c008d: programGuide,
    0x01000c0094: exit,
    0x01000c009c: channelUp,
    0x01000c009d: channelDown,
    0x01000c00b0: mediaPlay,
    0x01000c00b2: mediaRecord,
    0x01000c00b3: mediaFastForward,
    0x01000c00b4: mediaRewind,
    0x01000c00b5: mediaTrackNext,
    0x01000c00b6: mediaTrackPrevious,
    0x01000c00b7: mediaStop,
    0x01000c00b8: eject,
    0x01000c00cd: mediaPlayPause,
    0x01000c00cf: speechInputToggle,
    0x01000c00e5: bassBoost,
    0x01000c0183: mediaSelect,
    0x01000c0184: launchWordProcessor,
    0x01000c0186: launchSpreadsheet,
    0x01000c018a: launchMail,
    0x01000c018d: launchContacts,
    0x01000c018e: launchCalendar,
    0x01000c0192: launchApp2,
    0x01000c0194: launchApp1,
    0x01000c0196: launchInternetBrowser,
    0x01000c019c: logOff,
    0x01000c019e: lockScreen,
    0x01000c019f: launchControlPanel,
    0x01000c01a2: selectTask,
    0x01000c01a7: launchDocuments,
    0x01000c01ab: spellCheck,
    0x01000c01ae: launchKeyboardLayout,
    0x01000c01b1: launchScreenSaver,
    0x01000c01cb: launchAssistant,
    0x01000c01b7: launchAudioBrowser,
    0x01000c0201: newKey,
    0x01000c0203: close,
    0x01000c0207: save,
    0x01000c0208: print,
    0x01000c0221: browserSearch,
    0x01000c0223: browserHome,
    0x01000c0224: browserBack,
    0x01000c0225: browserForward,
    0x01000c0226: browserStop,
    0x01000c0227: browserRefresh,
    0x01000c022a: browserFavorites,
    0x01000c022d: zoomIn,
    0x01000c022e: zoomOut,
    0x01000c0232: zoomToggle,
    0x01000c0279: redo,
    0x01000c0289: mailReply,
    0x01000c028b: mailForward,
    0x01000c028c: mailSend,
    0x01000c029f: showAllWindows,
  };
}

class PhysicalKeyboardKey extends Diagnosticable {
  const PhysicalKeyboardKey(this.usbHidUsage, {this.debugName})
      : assert(usbHidUsage != null);

  final int usbHidUsage;

  final String debugName;

  static PhysicalKeyboardKey findKeyByCode(int usageCode) =>
      _knownPhysicalKeys[usageCode];

  @override
  int get hashCode => usbHidUsage.hashCode;

  @override
  bool operator ==(dynamic other) {
    if (other.runtimeType != runtimeType) {
      return false;
    }
    final PhysicalKeyboardKey typedOther = other;
    return usbHidUsage == typedOther.usbHidUsage;
  }

  @override
  void debugFillProperties(DiagnosticPropertiesBuilder properties) {
    super.debugFillProperties(properties);
    properties.add(StringProperty(
        'usbHidUsage', '0x${usbHidUsage.toRadixString(16).padLeft(8, '0')}',
        showName: true));
    properties.add(StringProperty('debugName', debugName,
        showName: true, defaultValue: null));
  }

  static const PhysicalKeyboardKey none =
      PhysicalKeyboardKey(0x00000000, debugName: kReleaseMode ? null : 'None');

  static const PhysicalKeyboardKey hyper =
      PhysicalKeyboardKey(0x00000010, debugName: kReleaseMode ? null : 'Hyper');

  static const PhysicalKeyboardKey superKey = PhysicalKeyboardKey(0x00000011,
      debugName: kReleaseMode ? null : 'Super Key');

  static const PhysicalKeyboardKey fn =
      PhysicalKeyboardKey(0x00000012, debugName: kReleaseMode ? null : 'Fn');

  static const PhysicalKeyboardKey fnLock = PhysicalKeyboardKey(0x00000013,
      debugName: kReleaseMode ? null : 'Fn Lock');

  static const PhysicalKeyboardKey suspend = PhysicalKeyboardKey(0x00000014,
      debugName: kReleaseMode ? null : 'Suspend');

  static const PhysicalKeyboardKey resume = PhysicalKeyboardKey(0x00000015,
      debugName: kReleaseMode ? null : 'Resume');

  static const PhysicalKeyboardKey turbo =
      PhysicalKeyboardKey(0x00000016, debugName: kReleaseMode ? null : 'Turbo');

  static const PhysicalKeyboardKey sleep =
      PhysicalKeyboardKey(0x00010082, debugName: kReleaseMode ? null : 'Sleep');

  static const PhysicalKeyboardKey wakeUp = PhysicalKeyboardKey(0x00010083,
      debugName: kReleaseMode ? null : 'Wake Up');

  static const PhysicalKeyboardKey displayToggleIntExt = PhysicalKeyboardKey(
      0x000100b5,
      debugName: kReleaseMode ? null : 'Display Toggle Int Ext');

  static const PhysicalKeyboardKey usbReserved = PhysicalKeyboardKey(0x00070000,
      debugName: kReleaseMode ? null : 'Usb Reserved');

  static const PhysicalKeyboardKey usbErrorRollOver = PhysicalKeyboardKey(
      0x00070001,
      debugName: kReleaseMode ? null : 'Usb Error Roll Over');

  static const PhysicalKeyboardKey usbPostFail = PhysicalKeyboardKey(0x00070002,
      debugName: kReleaseMode ? null : 'Usb Post Fail');

  static const PhysicalKeyboardKey usbErrorUndefined = PhysicalKeyboardKey(
      0x00070003,
      debugName: kReleaseMode ? null : 'Usb Error Undefined');

  static const PhysicalKeyboardKey keyA =
      PhysicalKeyboardKey(0x00070004, debugName: kReleaseMode ? null : 'Key A');

  static const PhysicalKeyboardKey keyB =
      PhysicalKeyboardKey(0x00070005, debugName: kReleaseMode ? null : 'Key B');

  static const PhysicalKeyboardKey keyC =
      PhysicalKeyboardKey(0x00070006, debugName: kReleaseMode ? null : 'Key C');

  static const PhysicalKeyboardKey keyD =
      PhysicalKeyboardKey(0x00070007, debugName: kReleaseMode ? null : 'Key D');

  static const PhysicalKeyboardKey keyE =
      PhysicalKeyboardKey(0x00070008, debugName: kReleaseMode ? null : 'Key E');

  static const PhysicalKeyboardKey keyF =
      PhysicalKeyboardKey(0x00070009, debugName: kReleaseMode ? null : 'Key F');

  static const PhysicalKeyboardKey keyG =
      PhysicalKeyboardKey(0x0007000a, debugName: kReleaseMode ? null : 'Key G');

  static const PhysicalKeyboardKey keyH =
      PhysicalKeyboardKey(0x0007000b, debugName: kReleaseMode ? null : 'Key H');

  static const PhysicalKeyboardKey keyI =
      PhysicalKeyboardKey(0x0007000c, debugName: kReleaseMode ? null : 'Key I');

  static const PhysicalKeyboardKey keyJ =
      PhysicalKeyboardKey(0x0007000d, debugName: kReleaseMode ? null : 'Key J');

  static const PhysicalKeyboardKey keyK =
      PhysicalKeyboardKey(0x0007000e, debugName: kReleaseMode ? null : 'Key K');

  static const PhysicalKeyboardKey keyL =
      PhysicalKeyboardKey(0x0007000f, debugName: kReleaseMode ? null : 'Key L');

  static const PhysicalKeyboardKey keyM =
      PhysicalKeyboardKey(0x00070010, debugName: kReleaseMode ? null : 'Key M');

  static const PhysicalKeyboardKey keyN =
      PhysicalKeyboardKey(0x00070011, debugName: kReleaseMode ? null : 'Key N');

  static const PhysicalKeyboardKey keyO =
      PhysicalKeyboardKey(0x00070012, debugName: kReleaseMode ? null : 'Key O');

  static const PhysicalKeyboardKey keyP =
      PhysicalKeyboardKey(0x00070013, debugName: kReleaseMode ? null : 'Key P');

  static const PhysicalKeyboardKey keyQ =
      PhysicalKeyboardKey(0x00070014, debugName: kReleaseMode ? null : 'Key Q');

  static const PhysicalKeyboardKey keyR =
      PhysicalKeyboardKey(0x00070015, debugName: kReleaseMode ? null : 'Key R');

  static const PhysicalKeyboardKey keyS =
      PhysicalKeyboardKey(0x00070016, debugName: kReleaseMode ? null : 'Key S');

  static const PhysicalKeyboardKey keyT =
      PhysicalKeyboardKey(0x00070017, debugName: kReleaseMode ? null : 'Key T');

  static const PhysicalKeyboardKey keyU =
      PhysicalKeyboardKey(0x00070018, debugName: kReleaseMode ? null : 'Key U');

  static const PhysicalKeyboardKey keyV =
      PhysicalKeyboardKey(0x00070019, debugName: kReleaseMode ? null : 'Key V');

  static const PhysicalKeyboardKey keyW =
      PhysicalKeyboardKey(0x0007001a, debugName: kReleaseMode ? null : 'Key W');

  static const PhysicalKeyboardKey keyX =
      PhysicalKeyboardKey(0x0007001b, debugName: kReleaseMode ? null : 'Key X');

  static const PhysicalKeyboardKey keyY =
      PhysicalKeyboardKey(0x0007001c, debugName: kReleaseMode ? null : 'Key Y');

  static const PhysicalKeyboardKey keyZ =
      PhysicalKeyboardKey(0x0007001d, debugName: kReleaseMode ? null : 'Key Z');

  static const PhysicalKeyboardKey digit1 = PhysicalKeyboardKey(0x0007001e,
      debugName: kReleaseMode ? null : 'Digit 1');

  static const PhysicalKeyboardKey digit2 = PhysicalKeyboardKey(0x0007001f,
      debugName: kReleaseMode ? null : 'Digit 2');

  static const PhysicalKeyboardKey digit3 = PhysicalKeyboardKey(0x00070020,
      debugName: kReleaseMode ? null : 'Digit 3');

  static const PhysicalKeyboardKey digit4 = PhysicalKeyboardKey(0x00070021,
      debugName: kReleaseMode ? null : 'Digit 4');

  static const PhysicalKeyboardKey digit5 = PhysicalKeyboardKey(0x00070022,
      debugName: kReleaseMode ? null : 'Digit 5');

  static const PhysicalKeyboardKey digit6 = PhysicalKeyboardKey(0x00070023,
      debugName: kReleaseMode ? null : 'Digit 6');

  static const PhysicalKeyboardKey digit7 = PhysicalKeyboardKey(0x00070024,
      debugName: kReleaseMode ? null : 'Digit 7');

  static const PhysicalKeyboardKey digit8 = PhysicalKeyboardKey(0x00070025,
      debugName: kReleaseMode ? null : 'Digit 8');

  static const PhysicalKeyboardKey digit9 = PhysicalKeyboardKey(0x00070026,
      debugName: kReleaseMode ? null : 'Digit 9');

  static const PhysicalKeyboardKey digit0 = PhysicalKeyboardKey(0x00070027,
      debugName: kReleaseMode ? null : 'Digit 0');

  static const PhysicalKeyboardKey enter =
      PhysicalKeyboardKey(0x00070028, debugName: kReleaseMode ? null : 'Enter');

  static const PhysicalKeyboardKey escape = PhysicalKeyboardKey(0x00070029,
      debugName: kReleaseMode ? null : 'Escape');

  static const PhysicalKeyboardKey backspace = PhysicalKeyboardKey(0x0007002a,
      debugName: kReleaseMode ? null : 'Backspace');

  static const PhysicalKeyboardKey tab =
      PhysicalKeyboardKey(0x0007002b, debugName: kReleaseMode ? null : 'Tab');

  static const PhysicalKeyboardKey space =
      PhysicalKeyboardKey(0x0007002c, debugName: kReleaseMode ? null : 'Space');

  static const PhysicalKeyboardKey minus =
      PhysicalKeyboardKey(0x0007002d, debugName: kReleaseMode ? null : 'Minus');

  static const PhysicalKeyboardKey equal =
      PhysicalKeyboardKey(0x0007002e, debugName: kReleaseMode ? null : 'Equal');

  static const PhysicalKeyboardKey bracketLeft = PhysicalKeyboardKey(0x0007002f,
      debugName: kReleaseMode ? null : 'Bracket Left');

  static const PhysicalKeyboardKey bracketRight = PhysicalKeyboardKey(
      0x00070030,
      debugName: kReleaseMode ? null : 'Bracket Right');

  static const PhysicalKeyboardKey backslash = PhysicalKeyboardKey(0x00070031,
      debugName: kReleaseMode ? null : 'Backslash');

  static const PhysicalKeyboardKey semicolon = PhysicalKeyboardKey(0x00070033,
      debugName: kReleaseMode ? null : 'Semicolon');

  static const PhysicalKeyboardKey quote =
      PhysicalKeyboardKey(0x00070034, debugName: kReleaseMode ? null : 'Quote');

  static const PhysicalKeyboardKey backquote = PhysicalKeyboardKey(0x00070035,
      debugName: kReleaseMode ? null : 'Backquote');

  static const PhysicalKeyboardKey comma =
      PhysicalKeyboardKey(0x00070036, debugName: kReleaseMode ? null : 'Comma');

  static const PhysicalKeyboardKey period = PhysicalKeyboardKey(0x00070037,
      debugName: kReleaseMode ? null : 'Period');

  static const PhysicalKeyboardKey slash =
      PhysicalKeyboardKey(0x00070038, debugName: kReleaseMode ? null : 'Slash');

  static const PhysicalKeyboardKey capsLock = PhysicalKeyboardKey(0x00070039,
      debugName: kReleaseMode ? null : 'Caps Lock');

  static const PhysicalKeyboardKey f1 =
      PhysicalKeyboardKey(0x0007003a, debugName: kReleaseMode ? null : 'F1');

  static const PhysicalKeyboardKey f2 =
      PhysicalKeyboardKey(0x0007003b, debugName: kReleaseMode ? null : 'F2');

  static const PhysicalKeyboardKey f3 =
      PhysicalKeyboardKey(0x0007003c, debugName: kReleaseMode ? null : 'F3');

  static const PhysicalKeyboardKey f4 =
      PhysicalKeyboardKey(0x0007003d, debugName: kReleaseMode ? null : 'F4');

  static const PhysicalKeyboardKey f5 =
      PhysicalKeyboardKey(0x0007003e, debugName: kReleaseMode ? null : 'F5');

  static const PhysicalKeyboardKey f6 =
      PhysicalKeyboardKey(0x0007003f, debugName: kReleaseMode ? null : 'F6');

  static const PhysicalKeyboardKey f7 =
      PhysicalKeyboardKey(0x00070040, debugName: kReleaseMode ? null : 'F7');

  static const PhysicalKeyboardKey f8 =
      PhysicalKeyboardKey(0x00070041, debugName: kReleaseMode ? null : 'F8');

  static const PhysicalKeyboardKey f9 =
      PhysicalKeyboardKey(0x00070042, debugName: kReleaseMode ? null : 'F9');

  static const PhysicalKeyboardKey f10 =
      PhysicalKeyboardKey(0x00070043, debugName: kReleaseMode ? null : 'F10');

  static const PhysicalKeyboardKey f11 =
      PhysicalKeyboardKey(0x00070044, debugName: kReleaseMode ? null : 'F11');

  static const PhysicalKeyboardKey f12 =
      PhysicalKeyboardKey(0x00070045, debugName: kReleaseMode ? null : 'F12');

  static const PhysicalKeyboardKey printScreen = PhysicalKeyboardKey(0x00070046,
      debugName: kReleaseMode ? null : 'Print Screen');

  static const PhysicalKeyboardKey scrollLock = PhysicalKeyboardKey(0x00070047,
      debugName: kReleaseMode ? null : 'Scroll Lock');

  static const PhysicalKeyboardKey pause =
      PhysicalKeyboardKey(0x00070048, debugName: kReleaseMode ? null : 'Pause');

  static const PhysicalKeyboardKey insert = PhysicalKeyboardKey(0x00070049,
      debugName: kReleaseMode ? null : 'Insert');

  static const PhysicalKeyboardKey home =
      PhysicalKeyboardKey(0x0007004a, debugName: kReleaseMode ? null : 'Home');

  static const PhysicalKeyboardKey pageUp = PhysicalKeyboardKey(0x0007004b,
      debugName: kReleaseMode ? null : 'Page Up');

  static const PhysicalKeyboardKey delete = PhysicalKeyboardKey(0x0007004c,
      debugName: kReleaseMode ? null : 'Delete');

  static const PhysicalKeyboardKey end =
      PhysicalKeyboardKey(0x0007004d, debugName: kReleaseMode ? null : 'End');

  static const PhysicalKeyboardKey pageDown = PhysicalKeyboardKey(0x0007004e,
      debugName: kReleaseMode ? null : 'Page Down');

  static const PhysicalKeyboardKey arrowRight = PhysicalKeyboardKey(0x0007004f,
      debugName: kReleaseMode ? null : 'Arrow Right');

  static const PhysicalKeyboardKey arrowLeft = PhysicalKeyboardKey(0x00070050,
      debugName: kReleaseMode ? null : 'Arrow Left');

  static const PhysicalKeyboardKey arrowDown = PhysicalKeyboardKey(0x00070051,
      debugName: kReleaseMode ? null : 'Arrow Down');

  static const PhysicalKeyboardKey arrowUp = PhysicalKeyboardKey(0x00070052,
      debugName: kReleaseMode ? null : 'Arrow Up');

  static const PhysicalKeyboardKey numLock = PhysicalKeyboardKey(0x00070053,
      debugName: kReleaseMode ? null : 'Num Lock');

  static const PhysicalKeyboardKey numpadDivide = PhysicalKeyboardKey(
      0x00070054,
      debugName: kReleaseMode ? null : 'Numpad Divide');

  static const PhysicalKeyboardKey numpadMultiply = PhysicalKeyboardKey(
      0x00070055,
      debugName: kReleaseMode ? null : 'Numpad Multiply');

  static const PhysicalKeyboardKey numpadSubtract = PhysicalKeyboardKey(
      0x00070056,
      debugName: kReleaseMode ? null : 'Numpad Subtract');

  static const PhysicalKeyboardKey numpadAdd = PhysicalKeyboardKey(0x00070057,
      debugName: kReleaseMode ? null : 'Numpad Add');

  static const PhysicalKeyboardKey numpadEnter = PhysicalKeyboardKey(0x00070058,
      debugName: kReleaseMode ? null : 'Numpad Enter');

  static const PhysicalKeyboardKey numpad1 = PhysicalKeyboardKey(0x00070059,
      debugName: kReleaseMode ? null : 'Numpad 1');

  static const PhysicalKeyboardKey numpad2 = PhysicalKeyboardKey(0x0007005a,
      debugName: kReleaseMode ? null : 'Numpad 2');

  static const PhysicalKeyboardKey numpad3 = PhysicalKeyboardKey(0x0007005b,
      debugName: kReleaseMode ? null : 'Numpad 3');

  static const PhysicalKeyboardKey numpad4 = PhysicalKeyboardKey(0x0007005c,
      debugName: kReleaseMode ? null : 'Numpad 4');

  static const PhysicalKeyboardKey numpad5 = PhysicalKeyboardKey(0x0007005d,
      debugName: kReleaseMode ? null : 'Numpad 5');

  static const PhysicalKeyboardKey numpad6 = PhysicalKeyboardKey(0x0007005e,
      debugName: kReleaseMode ? null : 'Numpad 6');

  static const PhysicalKeyboardKey numpad7 = PhysicalKeyboardKey(0x0007005f,
      debugName: kReleaseMode ? null : 'Numpad 7');

  static const PhysicalKeyboardKey numpad8 = PhysicalKeyboardKey(0x00070060,
      debugName: kReleaseMode ? null : 'Numpad 8');

  static const PhysicalKeyboardKey numpad9 = PhysicalKeyboardKey(0x00070061,
      debugName: kReleaseMode ? null : 'Numpad 9');

  static const PhysicalKeyboardKey numpad0 = PhysicalKeyboardKey(0x00070062,
      debugName: kReleaseMode ? null : 'Numpad 0');

  static const PhysicalKeyboardKey numpadDecimal = PhysicalKeyboardKey(
      0x00070063,
      debugName: kReleaseMode ? null : 'Numpad Decimal');

  static const PhysicalKeyboardKey intlBackslash = PhysicalKeyboardKey(
      0x00070064,
      debugName: kReleaseMode ? null : 'Intl Backslash');

  static const PhysicalKeyboardKey contextMenu = PhysicalKeyboardKey(0x00070065,
      debugName: kReleaseMode ? null : 'Context Menu');

  static const PhysicalKeyboardKey power =
      PhysicalKeyboardKey(0x00070066, debugName: kReleaseMode ? null : 'Power');

  static const PhysicalKeyboardKey numpadEqual = PhysicalKeyboardKey(0x00070067,
      debugName: kReleaseMode ? null : 'Numpad Equal');

  static const PhysicalKeyboardKey f13 =
      PhysicalKeyboardKey(0x00070068, debugName: kReleaseMode ? null : 'F13');

  static const PhysicalKeyboardKey f14 =
      PhysicalKeyboardKey(0x00070069, debugName: kReleaseMode ? null : 'F14');

  static const PhysicalKeyboardKey f15 =
      PhysicalKeyboardKey(0x0007006a, debugName: kReleaseMode ? null : 'F15');

  static const PhysicalKeyboardKey f16 =
      PhysicalKeyboardKey(0x0007006b, debugName: kReleaseMode ? null : 'F16');

  static const PhysicalKeyboardKey f17 =
      PhysicalKeyboardKey(0x0007006c, debugName: kReleaseMode ? null : 'F17');

  static const PhysicalKeyboardKey f18 =
      PhysicalKeyboardKey(0x0007006d, debugName: kReleaseMode ? null : 'F18');

  static const PhysicalKeyboardKey f19 =
      PhysicalKeyboardKey(0x0007006e, debugName: kReleaseMode ? null : 'F19');

  static const PhysicalKeyboardKey f20 =
      PhysicalKeyboardKey(0x0007006f, debugName: kReleaseMode ? null : 'F20');

  static const PhysicalKeyboardKey f21 =
      PhysicalKeyboardKey(0x00070070, debugName: kReleaseMode ? null : 'F21');

  static const PhysicalKeyboardKey f22 =
      PhysicalKeyboardKey(0x00070071, debugName: kReleaseMode ? null : 'F22');

  static const PhysicalKeyboardKey f23 =
      PhysicalKeyboardKey(0x00070072, debugName: kReleaseMode ? null : 'F23');

  static const PhysicalKeyboardKey f24 =
      PhysicalKeyboardKey(0x00070073, debugName: kReleaseMode ? null : 'F24');

  static const PhysicalKeyboardKey open =
      PhysicalKeyboardKey(0x00070074, debugName: kReleaseMode ? null : 'Open');

  static const PhysicalKeyboardKey help =
      PhysicalKeyboardKey(0x00070075, debugName: kReleaseMode ? null : 'Help');

  static const PhysicalKeyboardKey select = PhysicalKeyboardKey(0x00070077,
      debugName: kReleaseMode ? null : 'Select');

  static const PhysicalKeyboardKey again =
      PhysicalKeyboardKey(0x00070079, debugName: kReleaseMode ? null : 'Again');

  static const PhysicalKeyboardKey undo =
      PhysicalKeyboardKey(0x0007007a, debugName: kReleaseMode ? null : 'Undo');

  static const PhysicalKeyboardKey cut =
      PhysicalKeyboardKey(0x0007007b, debugName: kReleaseMode ? null : 'Cut');

  static const PhysicalKeyboardKey copy =
      PhysicalKeyboardKey(0x0007007c, debugName: kReleaseMode ? null : 'Copy');

  static const PhysicalKeyboardKey paste =
      PhysicalKeyboardKey(0x0007007d, debugName: kReleaseMode ? null : 'Paste');

  static const PhysicalKeyboardKey find =
      PhysicalKeyboardKey(0x0007007e, debugName: kReleaseMode ? null : 'Find');

  static const PhysicalKeyboardKey audioVolumeMute = PhysicalKeyboardKey(
      0x0007007f,
      debugName: kReleaseMode ? null : 'Audio Volume Mute');

  static const PhysicalKeyboardKey audioVolumeUp = PhysicalKeyboardKey(
      0x00070080,
      debugName: kReleaseMode ? null : 'Audio Volume Up');

  static const PhysicalKeyboardKey audioVolumeDown = PhysicalKeyboardKey(
      0x00070081,
      debugName: kReleaseMode ? null : 'Audio Volume Down');

  static const PhysicalKeyboardKey numpadComma = PhysicalKeyboardKey(0x00070085,
      debugName: kReleaseMode ? null : 'Numpad Comma');

  static const PhysicalKeyboardKey intlRo = PhysicalKeyboardKey(0x00070087,
      debugName: kReleaseMode ? null : 'Intl Ro');

  static const PhysicalKeyboardKey kanaMode = PhysicalKeyboardKey(0x00070088,
      debugName: kReleaseMode ? null : 'Kana Mode');

  static const PhysicalKeyboardKey intlYen = PhysicalKeyboardKey(0x00070089,
      debugName: kReleaseMode ? null : 'Intl Yen');

  static const PhysicalKeyboardKey convert = PhysicalKeyboardKey(0x0007008a,
      debugName: kReleaseMode ? null : 'Convert');

  static const PhysicalKeyboardKey nonConvert = PhysicalKeyboardKey(0x0007008b,
      debugName: kReleaseMode ? null : 'Non Convert');

  static const PhysicalKeyboardKey lang1 = PhysicalKeyboardKey(0x00070090,
      debugName: kReleaseMode ? null : 'Lang 1');

  static const PhysicalKeyboardKey lang2 = PhysicalKeyboardKey(0x00070091,
      debugName: kReleaseMode ? null : 'Lang 2');

  static const PhysicalKeyboardKey lang3 = PhysicalKeyboardKey(0x00070092,
      debugName: kReleaseMode ? null : 'Lang 3');

  static const PhysicalKeyboardKey lang4 = PhysicalKeyboardKey(0x00070093,
      debugName: kReleaseMode ? null : 'Lang 4');

  static const PhysicalKeyboardKey lang5 = PhysicalKeyboardKey(0x00070094,
      debugName: kReleaseMode ? null : 'Lang 5');

  static const PhysicalKeyboardKey abort =
      PhysicalKeyboardKey(0x0007009b, debugName: kReleaseMode ? null : 'Abort');

  static const PhysicalKeyboardKey props =
      PhysicalKeyboardKey(0x000700a3, debugName: kReleaseMode ? null : 'Props');

  static const PhysicalKeyboardKey numpadParenLeft = PhysicalKeyboardKey(
      0x000700b6,
      debugName: kReleaseMode ? null : 'Numpad Paren Left');

  static const PhysicalKeyboardKey numpadParenRight = PhysicalKeyboardKey(
      0x000700b7,
      debugName: kReleaseMode ? null : 'Numpad Paren Right');

  static const PhysicalKeyboardKey numpadBackspace = PhysicalKeyboardKey(
      0x000700bb,
      debugName: kReleaseMode ? null : 'Numpad Backspace');

  static const PhysicalKeyboardKey numpadMemoryStore = PhysicalKeyboardKey(
      0x000700d0,
      debugName: kReleaseMode ? null : 'Numpad Memory Store');

  static const PhysicalKeyboardKey numpadMemoryRecall = PhysicalKeyboardKey(
      0x000700d1,
      debugName: kReleaseMode ? null : 'Numpad Memory Recall');

  static const PhysicalKeyboardKey numpadMemoryClear = PhysicalKeyboardKey(
      0x000700d2,
      debugName: kReleaseMode ? null : 'Numpad Memory Clear');

  static const PhysicalKeyboardKey numpadMemoryAdd = PhysicalKeyboardKey(
      0x000700d3,
      debugName: kReleaseMode ? null : 'Numpad Memory Add');

  static const PhysicalKeyboardKey numpadMemorySubtract = PhysicalKeyboardKey(
      0x000700d4,
      debugName: kReleaseMode ? null : 'Numpad Memory Subtract');

  static const PhysicalKeyboardKey numpadSignChange = PhysicalKeyboardKey(
      0x000700d7,
      debugName: kReleaseMode ? null : 'Numpad Sign Change');

  static const PhysicalKeyboardKey numpadClear = PhysicalKeyboardKey(0x000700d8,
      debugName: kReleaseMode ? null : 'Numpad Clear');

  static const PhysicalKeyboardKey numpadClearEntry = PhysicalKeyboardKey(
      0x000700d9,
      debugName: kReleaseMode ? null : 'Numpad Clear Entry');

  static const PhysicalKeyboardKey controlLeft = PhysicalKeyboardKey(0x000700e0,
      debugName: kReleaseMode ? null : 'Control Left');

  static const PhysicalKeyboardKey shiftLeft = PhysicalKeyboardKey(0x000700e1,
      debugName: kReleaseMode ? null : 'Shift Left');

  static const PhysicalKeyboardKey altLeft = PhysicalKeyboardKey(0x000700e2,
      debugName: kReleaseMode ? null : 'Alt Left');

  static const PhysicalKeyboardKey metaLeft = PhysicalKeyboardKey(0x000700e3,
      debugName: kReleaseMode ? null : 'Meta Left');

  static const PhysicalKeyboardKey controlRight = PhysicalKeyboardKey(
      0x000700e4,
      debugName: kReleaseMode ? null : 'Control Right');

  static const PhysicalKeyboardKey shiftRight = PhysicalKeyboardKey(0x000700e5,
      debugName: kReleaseMode ? null : 'Shift Right');

  static const PhysicalKeyboardKey altRight = PhysicalKeyboardKey(0x000700e6,
      debugName: kReleaseMode ? null : 'Alt Right');

  static const PhysicalKeyboardKey metaRight = PhysicalKeyboardKey(0x000700e7,
      debugName: kReleaseMode ? null : 'Meta Right');

  static const PhysicalKeyboardKey info =
      PhysicalKeyboardKey(0x000c0060, debugName: kReleaseMode ? null : 'Info');

  static const PhysicalKeyboardKey closedCaptionToggle = PhysicalKeyboardKey(
      0x000c0061,
      debugName: kReleaseMode ? null : 'Closed Caption Toggle');

  static const PhysicalKeyboardKey brightnessUp = PhysicalKeyboardKey(
      0x000c006f,
      debugName: kReleaseMode ? null : 'Brightness Up');

  static const PhysicalKeyboardKey brightnessDown = PhysicalKeyboardKey(
      0x000c0070,
      debugName: kReleaseMode ? null : 'Brightness Down');

  static const PhysicalKeyboardKey brightnessToggle = PhysicalKeyboardKey(
      0x000c0072,
      debugName: kReleaseMode ? null : 'Brightness Toggle');

  static const PhysicalKeyboardKey brightnessMinimum = PhysicalKeyboardKey(
      0x000c0073,
      debugName: kReleaseMode ? null : 'Brightness Minimum');

  static const PhysicalKeyboardKey brightnessMaximum = PhysicalKeyboardKey(
      0x000c0074,
      debugName: kReleaseMode ? null : 'Brightness Maximum');

  static const PhysicalKeyboardKey brightnessAuto = PhysicalKeyboardKey(
      0x000c0075,
      debugName: kReleaseMode ? null : 'Brightness Auto');

  static const PhysicalKeyboardKey mediaLast = PhysicalKeyboardKey(0x000c0083,
      debugName: kReleaseMode ? null : 'Media Last');

  static const PhysicalKeyboardKey launchPhone = PhysicalKeyboardKey(0x000c008c,
      debugName: kReleaseMode ? null : 'Launch Phone');

  static const PhysicalKeyboardKey programGuide = PhysicalKeyboardKey(
      0x000c008d,
      debugName: kReleaseMode ? null : 'Program Guide');

  static const PhysicalKeyboardKey exit =
      PhysicalKeyboardKey(0x000c0094, debugName: kReleaseMode ? null : 'Exit');

  static const PhysicalKeyboardKey channelUp = PhysicalKeyboardKey(0x000c009c,
      debugName: kReleaseMode ? null : 'Channel Up');

  static const PhysicalKeyboardKey channelDown = PhysicalKeyboardKey(0x000c009d,
      debugName: kReleaseMode ? null : 'Channel Down');

  static const PhysicalKeyboardKey mediaPlay = PhysicalKeyboardKey(0x000c00b0,
      debugName: kReleaseMode ? null : 'Media Play');

  static const PhysicalKeyboardKey mediaRecord = PhysicalKeyboardKey(0x000c00b2,
      debugName: kReleaseMode ? null : 'Media Record');

  static const PhysicalKeyboardKey mediaFastForward = PhysicalKeyboardKey(
      0x000c00b3,
      debugName: kReleaseMode ? null : 'Media Fast Forward');

  static const PhysicalKeyboardKey mediaRewind = PhysicalKeyboardKey(0x000c00b4,
      debugName: kReleaseMode ? null : 'Media Rewind');

  static const PhysicalKeyboardKey mediaTrackNext = PhysicalKeyboardKey(
      0x000c00b5,
      debugName: kReleaseMode ? null : 'Media Track Next');

  static const PhysicalKeyboardKey mediaTrackPrevious = PhysicalKeyboardKey(
      0x000c00b6,
      debugName: kReleaseMode ? null : 'Media Track Previous');

  static const PhysicalKeyboardKey mediaStop = PhysicalKeyboardKey(0x000c00b7,
      debugName: kReleaseMode ? null : 'Media Stop');

  static const PhysicalKeyboardKey eject =
      PhysicalKeyboardKey(0x000c00b8, debugName: kReleaseMode ? null : 'Eject');

  static const PhysicalKeyboardKey mediaPlayPause = PhysicalKeyboardKey(
      0x000c00cd,
      debugName: kReleaseMode ? null : 'Media Play Pause');

  static const PhysicalKeyboardKey speechInputToggle = PhysicalKeyboardKey(
      0x000c00cf,
      debugName: kReleaseMode ? null : 'Speech Input Toggle');

  static const PhysicalKeyboardKey bassBoost = PhysicalKeyboardKey(0x000c00e5,
      debugName: kReleaseMode ? null : 'Bass Boost');

  static const PhysicalKeyboardKey mediaSelect = PhysicalKeyboardKey(0x000c0183,
      debugName: kReleaseMode ? null : 'Media Select');

  static const PhysicalKeyboardKey launchWordProcessor = PhysicalKeyboardKey(
      0x000c0184,
      debugName: kReleaseMode ? null : 'Launch Word Processor');

  static const PhysicalKeyboardKey launchSpreadsheet = PhysicalKeyboardKey(
      0x000c0186,
      debugName: kReleaseMode ? null : 'Launch Spreadsheet');

  static const PhysicalKeyboardKey launchMail = PhysicalKeyboardKey(0x000c018a,
      debugName: kReleaseMode ? null : 'Launch Mail');

  static const PhysicalKeyboardKey launchContacts = PhysicalKeyboardKey(
      0x000c018d,
      debugName: kReleaseMode ? null : 'Launch Contacts');

  static const PhysicalKeyboardKey launchCalendar = PhysicalKeyboardKey(
      0x000c018e,
      debugName: kReleaseMode ? null : 'Launch Calendar');

  static const PhysicalKeyboardKey launchApp2 = PhysicalKeyboardKey(0x000c0192,
      debugName: kReleaseMode ? null : 'Launch App2');

  static const PhysicalKeyboardKey launchApp1 = PhysicalKeyboardKey(0x000c0194,
      debugName: kReleaseMode ? null : 'Launch App1');

  static const PhysicalKeyboardKey launchInternetBrowser = PhysicalKeyboardKey(
      0x000c0196,
      debugName: kReleaseMode ? null : 'Launch Internet Browser');

  static const PhysicalKeyboardKey logOff = PhysicalKeyboardKey(0x000c019c,
      debugName: kReleaseMode ? null : 'Log Off');

  static const PhysicalKeyboardKey lockScreen = PhysicalKeyboardKey(0x000c019e,
      debugName: kReleaseMode ? null : 'Lock Screen');

  static const PhysicalKeyboardKey launchControlPanel = PhysicalKeyboardKey(
      0x000c019f,
      debugName: kReleaseMode ? null : 'Launch Control Panel');

  static const PhysicalKeyboardKey selectTask = PhysicalKeyboardKey(0x000c01a2,
      debugName: kReleaseMode ? null : 'Select Task');

  static const PhysicalKeyboardKey launchDocuments = PhysicalKeyboardKey(
      0x000c01a7,
      debugName: kReleaseMode ? null : 'Launch Documents');

  static const PhysicalKeyboardKey spellCheck = PhysicalKeyboardKey(0x000c01ab,
      debugName: kReleaseMode ? null : 'Spell Check');

  static const PhysicalKeyboardKey launchKeyboardLayout = PhysicalKeyboardKey(
      0x000c01ae,
      debugName: kReleaseMode ? null : 'Launch Keyboard Layout');

  static const PhysicalKeyboardKey launchScreenSaver = PhysicalKeyboardKey(
      0x000c01b1,
      debugName: kReleaseMode ? null : 'Launch Screen Saver');

  static const PhysicalKeyboardKey launchAssistant = PhysicalKeyboardKey(
      0x000c01cb,
      debugName: kReleaseMode ? null : 'Launch Assistant');

  static const PhysicalKeyboardKey launchAudioBrowser = PhysicalKeyboardKey(
      0x000c01b7,
      debugName: kReleaseMode ? null : 'Launch Audio Browser');

  static const PhysicalKeyboardKey newKey = PhysicalKeyboardKey(0x000c0201,
      debugName: kReleaseMode ? null : 'New Key');

  static const PhysicalKeyboardKey close =
      PhysicalKeyboardKey(0x000c0203, debugName: kReleaseMode ? null : 'Close');

  static const PhysicalKeyboardKey save =
      PhysicalKeyboardKey(0x000c0207, debugName: kReleaseMode ? null : 'Save');

  static const PhysicalKeyboardKey print =
      PhysicalKeyboardKey(0x000c0208, debugName: kReleaseMode ? null : 'Print');

  static const PhysicalKeyboardKey browserSearch = PhysicalKeyboardKey(
      0x000c0221,
      debugName: kReleaseMode ? null : 'Browser Search');

  static const PhysicalKeyboardKey browserHome = PhysicalKeyboardKey(0x000c0223,
      debugName: kReleaseMode ? null : 'Browser Home');

  static const PhysicalKeyboardKey browserBack = PhysicalKeyboardKey(0x000c0224,
      debugName: kReleaseMode ? null : 'Browser Back');

  static const PhysicalKeyboardKey browserForward = PhysicalKeyboardKey(
      0x000c0225,
      debugName: kReleaseMode ? null : 'Browser Forward');

  static const PhysicalKeyboardKey browserStop = PhysicalKeyboardKey(0x000c0226,
      debugName: kReleaseMode ? null : 'Browser Stop');

  static const PhysicalKeyboardKey browserRefresh = PhysicalKeyboardKey(
      0x000c0227,
      debugName: kReleaseMode ? null : 'Browser Refresh');

  static const PhysicalKeyboardKey browserFavorites = PhysicalKeyboardKey(
      0x000c022a,
      debugName: kReleaseMode ? null : 'Browser Favorites');

  static const PhysicalKeyboardKey zoomIn = PhysicalKeyboardKey(0x000c022d,
      debugName: kReleaseMode ? null : 'Zoom In');

  static const PhysicalKeyboardKey zoomOut = PhysicalKeyboardKey(0x000c022e,
      debugName: kReleaseMode ? null : 'Zoom Out');

  static const PhysicalKeyboardKey zoomToggle = PhysicalKeyboardKey(0x000c0232,
      debugName: kReleaseMode ? null : 'Zoom Toggle');

  static const PhysicalKeyboardKey redo =
      PhysicalKeyboardKey(0x000c0279, debugName: kReleaseMode ? null : 'Redo');

  static const PhysicalKeyboardKey mailReply = PhysicalKeyboardKey(0x000c0289,
      debugName: kReleaseMode ? null : 'Mail Reply');

  static const PhysicalKeyboardKey mailForward = PhysicalKeyboardKey(0x000c028b,
      debugName: kReleaseMode ? null : 'Mail Forward');

  static const PhysicalKeyboardKey mailSend = PhysicalKeyboardKey(0x000c028c,
      debugName: kReleaseMode ? null : 'Mail Send');

  static const PhysicalKeyboardKey showAllWindows = PhysicalKeyboardKey(
      0x000c029f,
      debugName: kReleaseMode ? null : 'Show All Windows');

  static const Map<int, PhysicalKeyboardKey> _knownPhysicalKeys =
      <int, PhysicalKeyboardKey>{
    0x00000000: none,
    0x00000010: hyper,
    0x00000011: superKey,
    0x00000012: fn,
    0x00000013: fnLock,
    0x00000014: suspend,
    0x00000015: resume,
    0x00000016: turbo,
    0x00010082: sleep,
    0x00010083: wakeUp,
    0x000100b5: displayToggleIntExt,
    0x00070000: usbReserved,
    0x00070001: usbErrorRollOver,
    0x00070002: usbPostFail,
    0x00070003: usbErrorUndefined,
    0x00070004: keyA,
    0x00070005: keyB,
    0x00070006: keyC,
    0x00070007: keyD,
    0x00070008: keyE,
    0x00070009: keyF,
    0x0007000a: keyG,
    0x0007000b: keyH,
    0x0007000c: keyI,
    0x0007000d: keyJ,
    0x0007000e: keyK,
    0x0007000f: keyL,
    0x00070010: keyM,
    0x00070011: keyN,
    0x00070012: keyO,
    0x00070013: keyP,
    0x00070014: keyQ,
    0x00070015: keyR,
    0x00070016: keyS,
    0x00070017: keyT,
    0x00070018: keyU,
    0x00070019: keyV,
    0x0007001a: keyW,
    0x0007001b: keyX,
    0x0007001c: keyY,
    0x0007001d: keyZ,
    0x0007001e: digit1,
    0x0007001f: digit2,
    0x00070020: digit3,
    0x00070021: digit4,
    0x00070022: digit5,
    0x00070023: digit6,
    0x00070024: digit7,
    0x00070025: digit8,
    0x00070026: digit9,
    0x00070027: digit0,
    0x00070028: enter,
    0x00070029: escape,
    0x0007002a: backspace,
    0x0007002b: tab,
    0x0007002c: space,
    0x0007002d: minus,
    0x0007002e: equal,
    0x0007002f: bracketLeft,
    0x00070030: bracketRight,
    0x00070031: backslash,
    0x00070033: semicolon,
    0x00070034: quote,
    0x00070035: backquote,
    0x00070036: comma,
    0x00070037: period,
    0x00070038: slash,
    0x00070039: capsLock,
    0x0007003a: f1,
    0x0007003b: f2,
    0x0007003c: f3,
    0x0007003d: f4,
    0x0007003e: f5,
    0x0007003f: f6,
    0x00070040: f7,
    0x00070041: f8,
    0x00070042: f9,
    0x00070043: f10,
    0x00070044: f11,
    0x00070045: f12,
    0x00070046: printScreen,
    0x00070047: scrollLock,
    0x00070048: pause,
    0x00070049: insert,
    0x0007004a: home,
    0x0007004b: pageUp,
    0x0007004c: delete,
    0x0007004d: end,
    0x0007004e: pageDown,
    0x0007004f: arrowRight,
    0x00070050: arrowLeft,
    0x00070051: arrowDown,
    0x00070052: arrowUp,
    0x00070053: numLock,
    0x00070054: numpadDivide,
    0x00070055: numpadMultiply,
    0x00070056: numpadSubtract,
    0x00070057: numpadAdd,
    0x00070058: numpadEnter,
    0x00070059: numpad1,
    0x0007005a: numpad2,
    0x0007005b: numpad3,
    0x0007005c: numpad4,
    0x0007005d: numpad5,
    0x0007005e: numpad6,
    0x0007005f: numpad7,
    0x00070060: numpad8,
    0x00070061: numpad9,
    0x00070062: numpad0,
    0x00070063: numpadDecimal,
    0x00070064: intlBackslash,
    0x00070065: contextMenu,
    0x00070066: power,
    0x00070067: numpadEqual,
    0x00070068: f13,
    0x00070069: f14,
    0x0007006a: f15,
    0x0007006b: f16,
    0x0007006c: f17,
    0x0007006d: f18,
    0x0007006e: f19,
    0x0007006f: f20,
    0x00070070: f21,
    0x00070071: f22,
    0x00070072: f23,
    0x00070073: f24,
    0x00070074: open,
    0x00070075: help,
    0x00070077: select,
    0x00070079: again,
    0x0007007a: undo,
    0x0007007b: cut,
    0x0007007c: copy,
    0x0007007d: paste,
    0x0007007e: find,
    0x0007007f: audioVolumeMute,
    0x00070080: audioVolumeUp,
    0x00070081: audioVolumeDown,
    0x00070085: numpadComma,
    0x00070087: intlRo,
    0x00070088: kanaMode,
    0x00070089: intlYen,
    0x0007008a: convert,
    0x0007008b: nonConvert,
    0x00070090: lang1,
    0x00070091: lang2,
    0x00070092: lang3,
    0x00070093: lang4,
    0x00070094: lang5,
    0x0007009b: abort,
    0x000700a3: props,
    0x000700b6: numpadParenLeft,
    0x000700b7: numpadParenRight,
    0x000700bb: numpadBackspace,
    0x000700d0: numpadMemoryStore,
    0x000700d1: numpadMemoryRecall,
    0x000700d2: numpadMemoryClear,
    0x000700d3: numpadMemoryAdd,
    0x000700d4: numpadMemorySubtract,
    0x000700d7: numpadSignChange,
    0x000700d8: numpadClear,
    0x000700d9: numpadClearEntry,
    0x000700e0: controlLeft,
    0x000700e1: shiftLeft,
    0x000700e2: altLeft,
    0x000700e3: metaLeft,
    0x000700e4: controlRight,
    0x000700e5: shiftRight,
    0x000700e6: altRight,
    0x000700e7: metaRight,
    0x000c0060: info,
    0x000c0061: closedCaptionToggle,
    0x000c006f: brightnessUp,
    0x000c0070: brightnessDown,
    0x000c0072: brightnessToggle,
    0x000c0073: brightnessMinimum,
    0x000c0074: brightnessMaximum,
    0x000c0075: brightnessAuto,
    0x000c0083: mediaLast,
    0x000c008c: launchPhone,
    0x000c008d: programGuide,
    0x000c0094: exit,
    0x000c009c: channelUp,
    0x000c009d: channelDown,
    0x000c00b0: mediaPlay,
    0x000c00b2: mediaRecord,
    0x000c00b3: mediaFastForward,
    0x000c00b4: mediaRewind,
    0x000c00b5: mediaTrackNext,
    0x000c00b6: mediaTrackPrevious,
    0x000c00b7: mediaStop,
    0x000c00b8: eject,
    0x000c00cd: mediaPlayPause,
    0x000c00cf: speechInputToggle,
    0x000c00e5: bassBoost,
    0x000c0183: mediaSelect,
    0x000c0184: launchWordProcessor,
    0x000c0186: launchSpreadsheet,
    0x000c018a: launchMail,
    0x000c018d: launchContacts,
    0x000c018e: launchCalendar,
    0x000c0192: launchApp2,
    0x000c0194: launchApp1,
    0x000c0196: launchInternetBrowser,
    0x000c019c: logOff,
    0x000c019e: lockScreen,
    0x000c019f: launchControlPanel,
    0x000c01a2: selectTask,
    0x000c01a7: launchDocuments,
    0x000c01ab: spellCheck,
    0x000c01ae: launchKeyboardLayout,
    0x000c01b1: launchScreenSaver,
    0x000c01cb: launchAssistant,
    0x000c01b7: launchAudioBrowser,
    0x000c0201: newKey,
    0x000c0203: close,
    0x000c0207: save,
    0x000c0208: print,
    0x000c0221: browserSearch,
    0x000c0223: browserHome,
    0x000c0224: browserBack,
    0x000c0225: browserForward,
    0x000c0226: browserStop,
    0x000c0227: browserRefresh,
    0x000c022a: browserFavorites,
    0x000c022d: zoomIn,
    0x000c022e: zoomOut,
    0x000c0232: zoomToggle,
    0x000c0279: redo,
    0x000c0289: mailReply,
    0x000c028b: mailForward,
    0x000c028c: mailSend,
    0x000c029f: showAllWindows,
  };
}
