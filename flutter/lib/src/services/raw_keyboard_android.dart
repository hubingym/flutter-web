import 'package:flutter_web/foundation.dart';

import 'keyboard_key.dart';
import 'keyboard_maps.dart';
import 'raw_keyboard.dart';

const int _kCombiningCharacterMask = 0x7fffffff;

class RawKeyEventDataAndroid extends RawKeyEventData {
  const RawKeyEventDataAndroid({
    this.flags = 0,
    this.codePoint = 0,
    this.plainCodePoint = 0,
    this.keyCode = 0,
    this.scanCode = 0,
    this.metaState = 0,
  })  : assert(flags != null),
        assert(codePoint != null),
        assert(keyCode != null),
        assert(scanCode != null),
        assert(metaState != null);

  final int flags;

  final int codePoint;

  final int plainCodePoint;

  final int keyCode;

  final int scanCode;

  final int metaState;

  @override
  String get keyLabel => plainCodePoint == 0
      ? null
      : String.fromCharCode(plainCodePoint & _kCombiningCharacterMask);

  @override
  PhysicalKeyboardKey get physicalKey =>
      kAndroidToPhysicalKey[scanCode] ?? PhysicalKeyboardKey.none;

  @override
  LogicalKeyboardKey get logicalKey {
    final LogicalKeyboardKey numPadKey = kAndroidNumPadMap[keyCode];
    if (numPadKey != null) {
      return numPadKey;
    }

    if (keyLabel != null &&
        keyLabel.isNotEmpty &&
        !LogicalKeyboardKey.isControlCharacter(keyLabel)) {
      final int combinedCodePoint = plainCodePoint & _kCombiningCharacterMask;
      final int keyId = LogicalKeyboardKey.unicodePlane |
          (combinedCodePoint & LogicalKeyboardKey.valueMask);
      return LogicalKeyboardKey.findKeyByKeyId(keyId) ??
          LogicalKeyboardKey(
            keyId,
            keyLabel: keyLabel,
            debugName: kReleaseMode ? null : 'Key ${keyLabel.toUpperCase()}',
          );
    }

    LogicalKeyboardKey newKey = kAndroidToLogicalKey[keyCode];
    if (newKey != null) {
      return newKey;
    }

    const int androidKeyIdPlane = 0x00200000000;
    newKey ??= LogicalKeyboardKey(
      androidKeyIdPlane | keyCode | LogicalKeyboardKey.autogeneratedMask,
      debugName: kReleaseMode ? null : 'Unknown Android key code $keyCode',
    );
    return newKey;
  }

  bool _isLeftRightModifierPressed(
      KeyboardSide side, int anyMask, int leftMask, int rightMask) {
    if (metaState & anyMask == 0) {
      return false;
    }
    switch (side) {
      case KeyboardSide.any:
        return true;
      case KeyboardSide.all:
        return metaState & leftMask != 0 && metaState & rightMask != 0;
      case KeyboardSide.left:
        return metaState & leftMask != 0;
      case KeyboardSide.right:
        return metaState & rightMask != 0;
    }
    return false;
  }

  @override
  bool isModifierPressed(ModifierKey key,
      {KeyboardSide side = KeyboardSide.any}) {
    assert(side != null);
    switch (key) {
      case ModifierKey.controlModifier:
        return _isLeftRightModifierPressed(
            side, modifierControl, modifierLeftControl, modifierRightControl);
      case ModifierKey.shiftModifier:
        return _isLeftRightModifierPressed(
            side, modifierShift, modifierLeftShift, modifierRightShift);
      case ModifierKey.altModifier:
        return _isLeftRightModifierPressed(
            side, modifierAlt, modifierLeftAlt, modifierRightAlt);
      case ModifierKey.metaModifier:
        return _isLeftRightModifierPressed(
            side, modifierMeta, modifierLeftMeta, modifierRightMeta);
      case ModifierKey.capsLockModifier:
        return metaState & modifierCapsLock != 0;
      case ModifierKey.numLockModifier:
        return metaState & modifierNumLock != 0;
      case ModifierKey.scrollLockModifier:
        return metaState & modifierScrollLock != 0;
      case ModifierKey.functionModifier:
        return metaState & modifierFunction != 0;
      case ModifierKey.symbolModifier:
        return metaState & modifierSym != 0;
    }
    return false;
  }

  @override
  KeyboardSide getModifierSide(ModifierKey key) {
    KeyboardSide findSide(int leftMask, int rightMask) {
      final int combinedMask = leftMask | rightMask;
      final int combined = metaState & combinedMask;
      if (combined == leftMask) {
        return KeyboardSide.left;
      } else if (combined == rightMask) {
        return KeyboardSide.right;
      } else if (combined == combinedMask) {
        return KeyboardSide.all;
      }
      return null;
    }

    switch (key) {
      case ModifierKey.controlModifier:
        return findSide(modifierLeftControl, modifierRightControl);
      case ModifierKey.shiftModifier:
        return findSide(modifierLeftShift, modifierRightShift);
      case ModifierKey.altModifier:
        return findSide(modifierLeftAlt, modifierRightAlt);
      case ModifierKey.metaModifier:
        return findSide(modifierLeftMeta, modifierRightMeta);
      case ModifierKey.capsLockModifier:
      case ModifierKey.numLockModifier:
      case ModifierKey.scrollLockModifier:
      case ModifierKey.functionModifier:
      case ModifierKey.symbolModifier:
        return KeyboardSide.all;
    }

    assert(false, 'Not handling $key type properly.');
    return null;
  }

  static const int modifierNone = 0;

  static const int modifierAlt = 0x02;

  static const int modifierLeftAlt = 0x10;

  static const int modifierRightAlt = 0x20;

  static const int modifierShift = 0x01;

  static const int modifierLeftShift = 0x40;

  static const int modifierRightShift = 0x80;

  static const int modifierSym = 0x04;

  static const int modifierFunction = 0x08;

  static const int modifierControl = 0x1000;

  static const int modifierLeftControl = 0x2000;

  static const int modifierRightControl = 0x4000;

  static const int modifierMeta = 0x10000;

  static const int modifierLeftMeta = 0x20000;

  static const int modifierRightMeta = 0x40000;

  static const int modifierCapsLock = 0x100000;

  static const int modifierNumLock = 0x200000;

  static const int modifierScrollLock = 0x400000;

  @override
  String toString() {
    return '$runtimeType(keyLabel: $keyLabel flags: $flags, codePoint: $codePoint, '
        'keyCode: $keyCode, scanCode: $scanCode, metaState: $metaState, '
        'modifiers down: $modifiersPressed)';
  }
}
