import 'package:flutter_web/foundation.dart';

import 'keyboard_key.dart';
import 'keyboard_maps.dart';
import 'raw_keyboard.dart';

class RawKeyEventDataMacOs extends RawKeyEventData {
  const RawKeyEventDataMacOs({
    this.characters = '',
    this.charactersIgnoringModifiers = '',
    this.keyCode = 0,
    this.modifiers = 0,
  })  : assert(characters != null),
        assert(charactersIgnoringModifiers != null),
        assert(keyCode != null),
        assert(modifiers != null);

  final String characters;

  final String charactersIgnoringModifiers;

  final int keyCode;

  final int modifiers;

  @override
  String get keyLabel =>
      charactersIgnoringModifiers.isEmpty ? null : charactersIgnoringModifiers;

  @override
  PhysicalKeyboardKey get physicalKey =>
      kMacOsToPhysicalKey[keyCode] ?? PhysicalKeyboardKey.none;

  @override
  LogicalKeyboardKey get logicalKey {
    final LogicalKeyboardKey numPadKey = kMacOsNumPadMap[keyCode];
    if (numPadKey != null) {
      return numPadKey;
    }

    if (keyLabel != null && !LogicalKeyboardKey.isControlCharacter(keyLabel)) {
      assert(charactersIgnoringModifiers.length <= 2);
      int codeUnit = charactersIgnoringModifiers.codeUnitAt(0);
      if (charactersIgnoringModifiers.length == 2) {
        final int secondCode = charactersIgnoringModifiers.codeUnitAt(1);
        codeUnit = (codeUnit << 16) | secondCode;
      }

      final int keyId = LogicalKeyboardKey.unicodePlane |
          (codeUnit & LogicalKeyboardKey.valueMask);
      return LogicalKeyboardKey.findKeyByKeyId(keyId) ??
          LogicalKeyboardKey(
            keyId,
            keyLabel: keyLabel,
            debugName: kReleaseMode ? null : 'Key ${keyLabel.toUpperCase()}',
          );
    }

    const int macOsKeyIdPlane = 0x00500000000;

    if (physicalKey != PhysicalKeyboardKey.none) {
      final int keyId = physicalKey.usbHidUsage | LogicalKeyboardKey.hidPlane;
      return LogicalKeyboardKey.findKeyByKeyId(keyId) ??
          LogicalKeyboardKey(
            keyId,
            keyLabel: physicalKey.debugName,
            debugName: physicalKey.debugName,
          );
    }

    return LogicalKeyboardKey(
      macOsKeyIdPlane | keyCode | LogicalKeyboardKey.autogeneratedMask,
      debugName: kReleaseMode ? null : 'Unknown macOS key code $keyCode',
    );
  }

  bool _isLeftRightModifierPressed(
      KeyboardSide side, int anyMask, int leftMask, int rightMask) {
    if (modifiers & anyMask == 0) {
      return false;
    }
    switch (side) {
      case KeyboardSide.any:
        return true;
      case KeyboardSide.all:
        return modifiers & leftMask != 0 && modifiers & rightMask != 0;
      case KeyboardSide.left:
        return modifiers & leftMask != 0;
      case KeyboardSide.right:
        return modifiers & rightMask != 0;
    }
    return false;
  }

  @override
  bool isModifierPressed(ModifierKey key,
      {KeyboardSide side = KeyboardSide.any}) {
    final int independentModifier = modifiers & deviceIndependentMask;
    switch (key) {
      case ModifierKey.controlModifier:
        return _isLeftRightModifierPressed(
            side,
            independentModifier & modifierControl,
            modifierLeftControl,
            modifierRightControl);
      case ModifierKey.shiftModifier:
        return _isLeftRightModifierPressed(
            side,
            independentModifier & modifierShift,
            modifierLeftShift,
            modifierRightShift);
      case ModifierKey.altModifier:
        return _isLeftRightModifierPressed(
            side,
            independentModifier & modifierOption,
            modifierLeftOption,
            modifierRightOption);
      case ModifierKey.metaModifier:
        return _isLeftRightModifierPressed(
            side,
            independentModifier & modifierCommand,
            modifierLeftCommand,
            modifierRightCommand);
      case ModifierKey.capsLockModifier:
        return independentModifier & modifierCapsLock != 0;
      case ModifierKey.numLockModifier:
        return independentModifier & modifierNumericPad != 0;
      case ModifierKey.functionModifier:
        return independentModifier & modifierFunction != 0;
      case ModifierKey.symbolModifier:
      case ModifierKey.scrollLockModifier:
        return false;
    }
    return false;
  }

  @override
  KeyboardSide getModifierSide(ModifierKey key) {
    KeyboardSide findSide(int leftMask, int rightMask) {
      final int combinedMask = leftMask | rightMask;
      final int combined = modifiers & combinedMask;
      if (combined == leftMask) {
        return KeyboardSide.left;
      } else if (combined == rightMask) {
        return KeyboardSide.right;
      } else if (combined == combinedMask) {
        return KeyboardSide.all;
      }
      return null;
    }

    switch (key) {
      case ModifierKey.controlModifier:
        return findSide(modifierLeftControl, modifierRightControl);
      case ModifierKey.shiftModifier:
        return findSide(modifierLeftShift, modifierRightShift);
      case ModifierKey.altModifier:
        return findSide(modifierLeftOption, modifierRightOption);
      case ModifierKey.metaModifier:
        return findSide(modifierLeftCommand, modifierRightCommand);
      case ModifierKey.capsLockModifier:
      case ModifierKey.numLockModifier:
      case ModifierKey.scrollLockModifier:
      case ModifierKey.functionModifier:
      case ModifierKey.symbolModifier:
        return KeyboardSide.all;
    }

    assert(false, 'Not handling $key type properly.');
    return null;
  }

  static const int modifierCapsLock = 0x10000;

  static const int modifierShift = 0x20000;

  static const int modifierLeftShift = 0x02;

  static const int modifierRightShift = 0x04;

  static const int modifierControl = 0x40000;

  static const int modifierLeftControl = 0x01;

  static const int modifierRightControl = 0x2000;

  static const int modifierOption = 0x80000;

  static const int modifierLeftOption = 0x20;

  static const int modifierRightOption = 0x40;

  static const int modifierCommand = 0x100000;

  static const int modifierLeftCommand = 0x08;

  static const int modifierRightCommand = 0x10;

  static const int modifierNumericPad = 0x200000;

  static const int modifierHelp = 0x400000;

  static const int modifierFunction = 0x800000;

  static const int deviceIndependentMask = 0xffff0000;

  @override
  String toString() {
    return '$runtimeType(keyLabel: $keyLabel, keyCode: $keyCode, characters: $characters,'
        ' unmodifiedCharacters: $charactersIgnoringModifiers, modifiers: $modifiers, '
        'modifiers down: $modifiersPressed)';
  }
}
